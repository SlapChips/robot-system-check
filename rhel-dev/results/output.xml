<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.9.16 on linux)" generated="20231004 13:43:22.653" rpa="false" schemaversion="4">
<suite id="s1" name="ATP">
<suite id="s1-s1" name="NSO Operating System (RHEL) Security Features Validation" source="/mnt/vm-shared/robot-dev/rhel-dev/security.v2.robot">
<test id="s1-s1-t1" name="Verify firewalld service is enabled" line="22">
<kw name="Step. Run the command systemctl is-enabled firewalld" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:22.729" level="INFO">Run the command systemctl is-enabled firewalld</msg>
<status status="PASS" starttime="20231004 13:43:22.728" endtime="20231004 13:43:22.729"/>
</kw>
<status status="PASS" starttime="20231004 13:43:22.728" endtime="20231004 13:43:22.729"/>
</kw>
<kw name="Step. Verify that the response is 'enabled'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:22.731" level="INFO">Verify that the response is 'enabled'</msg>
<status status="PASS" starttime="20231004 13:43:22.730" endtime="20231004 13:43:22.731"/>
</kw>
<status status="PASS" starttime="20231004 13:43:22.729" endtime="20231004 13:43:22.731"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>systemctl is-enabled firewalld</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:22.734" level="INFO">Running command 'systemctl is-enabled firewalld 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:22.752" level="INFO">${output} = enabled</msg>
<status status="PASS" starttime="20231004 13:43:22.731" endtime="20231004 13:43:22.752"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>enabled</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20231004 13:43:22.753" endtime="20231004 13:43:22.754"/>
</kw>
<doc>The firewall service should not be disabled on reboot</doc>
<tag>security</tag>
<status status="PASS" starttime="20231004 13:43:22.727" endtime="20231004 13:43:22.755"/>
</test>
<test id="s1-s1-t2" name="Verify NSO ports are configured in the firewalld" line="30">
<kw name="Step. Run the command sudo firewall-cmd --list-all" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:22.759" level="INFO">Run the command sudo firewall-cmd --list-all</msg>
<status status="PASS" starttime="20231004 13:43:22.758" endtime="20231004 13:43:22.759"/>
</kw>
<status status="PASS" starttime="20231004 13:43:22.758" endtime="20231004 13:43:22.759"/>
</kw>
<kw name="Step. Verify that the required ports are configured" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:22.760" level="INFO">Verify that the required ports are configured</msg>
<status status="PASS" starttime="20231004 13:43:22.760" endtime="20231004 13:43:22.760"/>
</kw>
<status status="PASS" starttime="20231004 13:43:22.759" endtime="20231004 13:43:22.761"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>sudo firewall-cmd --list-all</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:22.764" level="INFO">Running command 'sudo firewall-cmd --list-all 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.205" level="INFO">${output} = public (active)
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client ssh
  ports: 22/tcp 2022/tcp 2024/tcp 8888/tcp 4000/udp 1062/udp 20243/t...</msg>
<status status="PASS" starttime="20231004 13:43:22.761" endtime="20231004 13:43:23.205"/>
</kw>
<for flavor="IN">
<var>${port}</var>
<value>@{nso_fw_ports}</value>
<iter>
<var name="${port}">2022</var>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${port}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.207" endtime="20231004 13:43:23.207"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${port}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.208" level="INFO">2022</msg>
<status status="PASS" starttime="20231004 13:43:23.208" endtime="20231004 13:43:23.208"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.207" endtime="20231004 13:43:23.208"/>
</iter>
<iter>
<var name="${port}">2024</var>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${port}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.208" endtime="20231004 13:43:23.208"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${port}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.209" level="INFO">2024</msg>
<status status="PASS" starttime="20231004 13:43:23.209" endtime="20231004 13:43:23.209"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.208" endtime="20231004 13:43:23.209"/>
</iter>
<iter>
<var name="${port}">8080</var>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${port}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.209" endtime="20231004 13:43:23.209"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${port}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.210" level="INFO">8080</msg>
<status status="PASS" starttime="20231004 13:43:23.210" endtime="20231004 13:43:23.210"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.209" endtime="20231004 13:43:23.210"/>
</iter>
<iter>
<var name="${port}">8888</var>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${port}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.210" endtime="20231004 13:43:23.211"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${port}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.212" level="INFO">8888</msg>
<status status="PASS" starttime="20231004 13:43:23.211" endtime="20231004 13:43:23.212"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.210" endtime="20231004 13:43:23.212"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.206" endtime="20231004 13:43:23.212"/>
</for>
<doc>Check that the neccesary tcp/udp ports are open for nso the
ports are listed in the list "nso_fw_ports" defined in the global Variables
List includes the following : ['2022', '2024', '8080', '8888']</doc>
<tag>security</tag>
<status status="PASS" starttime="20231004 13:43:22.757" endtime="20231004 13:43:23.212"/>
</test>
<test id="s1-s1-t3" name="Verify authselect profile sssd-vf is created" line="43">
<kw name="Step. Run the command 'authselect list'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.216" level="INFO">Run the command 'authselect list'</msg>
<status status="PASS" starttime="20231004 13:43:23.215" endtime="20231004 13:43:23.216"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.215" endtime="20231004 13:43:23.216"/>
</kw>
<kw name="Step. Verify that the 'sssd-vf' profile exists" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.217" level="INFO">Verify that the 'sssd-vf' profile exists</msg>
<status status="PASS" starttime="20231004 13:43:23.217" endtime="20231004 13:43:23.217"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.216" endtime="20231004 13:43:23.217"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>authselect list</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.221" level="INFO">Running command 'authselect list 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.228" level="INFO">${output} = - minimal       	 Local users only for minimal installations
- sssd          	 Enable SSSD for system authentication (also for local users only)
- winbind       	 Enable winbind for system authenticat...</msg>
<status status="PASS" starttime="20231004 13:43:23.218" endtime="20231004 13:43:23.229"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>sssd-vf</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.229" endtime="20231004 13:43:23.230"/>
</kw>
<doc>Verify that a custom sssd profile has been created</doc>
<tag>security</tag>
<status status="PASS" starttime="20231004 13:43:23.214" endtime="20231004 13:43:23.231"/>
</test>
<test id="s1-s1-t4" name="Verify expected authselect profile is active" line="51">
<kw name="Step. Run the command 'authselect current -r'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.234" level="INFO">Run the command 'authselect current -r'</msg>
<status status="PASS" starttime="20231004 13:43:23.234" endtime="20231004 13:43:23.235"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.233" endtime="20231004 13:43:23.235"/>
</kw>
<kw name="Step. Verify that the profile custom/sssd-vf is active" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.236" level="INFO">Verify that the profile custom/sssd-vf is active</msg>
<status status="PASS" starttime="20231004 13:43:23.236" endtime="20231004 13:43:23.236"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.235" endtime="20231004 13:43:23.236"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>authselect current -r</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.240" level="INFO">Running command 'authselect current -r 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.246" level="INFO">${output} = custom/sssd-vf without-nullok with-faillock</msg>
<status status="PASS" starttime="20231004 13:43:23.237" endtime="20231004 13:43:23.247"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${profile}</var>
<arg>custom/sssd-vf</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.248" level="INFO">${profile} = custom/sssd-vf</msg>
<status status="PASS" starttime="20231004 13:43:23.247" endtime="20231004 13:43:23.248"/>
</kw>
<if>
<branch type="IF" condition="'${profile}' in '${output}'">
<kw name="Pass Execution" library="BuiltIn">
<arg>Current Profile is correct - sssd-vf</arg>
<doc>Skips rest of the current test, setup, or teardown with PASS status.</doc>
<msg timestamp="20231004 13:43:23.249" level="INFO">Execution passed with message:
Current Profile is correct - sssd-vf</msg>
<status status="PASS" starttime="20231004 13:43:23.249" endtime="20231004 13:43:23.249"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.249" endtime="20231004 13:43:23.249"/>
</branch>
<branch type="ELSE">
<kw name="Fail" library="BuiltIn">
<arg>Incorrect, or No, Profile active</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.250" endtime="20231004 13:43:23.250"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.250" endtime="20231004 13:43:23.250"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.248" endtime="20231004 13:43:23.250"/>
</if>
<doc>This runs the command "authselect current -r" and returns the current active profile
the test checks that this matches the expected value of custom/sssd-vf</doc>
<status status="PASS" starttime="20231004 13:43:23.232" endtime="20231004 13:43:23.250">Current Profile is correct - sssd-vf</status>
</test>
<test id="s1-s1-t5" name="Verify that the required PAM Modules are enabled" line="61">
<kw name="Step. Run the command 'authselect current'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.256" level="INFO">Run the command 'authselect current'</msg>
<status status="PASS" starttime="20231004 13:43:23.255" endtime="20231004 13:43:23.256"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.254" endtime="20231004 13:43:23.256"/>
</kw>
<kw name="Step. Validate that the required features, listed above, are enabled" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.257" level="INFO">Validate that the required features, listed above, are enabled</msg>
<status status="PASS" starttime="20231004 13:43:23.257" endtime="20231004 13:43:23.257"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.256" endtime="20231004 13:43:23.257"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>authselect current</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.260" level="INFO">Running command 'authselect current 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.267" level="INFO">${output} = Profile ID: custom/sssd-vf
Enabled features:
- without-nullok
- with-faillock</msg>
<status status="PASS" starttime="20231004 13:43:23.258" endtime="20231004 13:43:23.268"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${module_status_dict}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231004 13:43:23.270" level="INFO">${module_status_dict} = {}</msg>
<status status="PASS" starttime="20231004 13:43:23.269" endtime="20231004 13:43:23.270"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.272" level="INFO">Profile ID: custom/sssd-vf
Enabled features:
- without-nullok
- with-faillock</msg>
<status status="PASS" starttime="20231004 13:43:23.271" endtime="20231004 13:43:23.272"/>
</kw>
<for flavor="IN">
<var>${module}</var>
<value>@{pam_modules}</value>
<iter>
<var name="${module}">with-faillock</var>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${regex_result}</var>
<var>${regex_message}</var>
<arg>Should Match Regexp</arg>
<arg>${output}</arg>
<arg>${module}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>${module}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231004 13:43:23.273" endtime="20231004 13:43:23.274"/>
</kw>
<msg timestamp="20231004 13:43:23.274" level="INFO">${regex_result} = PASS</msg>
<msg timestamp="20231004 13:43:23.274" level="INFO">${regex_message} = with-faillock</msg>
<status status="PASS" starttime="20231004 13:43:23.273" endtime="20231004 13:43:23.274"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${module_status_dict}</arg>
<arg>${module}</arg>
<arg>${regex_result}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20231004 13:43:23.274" endtime="20231004 13:43:23.275"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.272" endtime="20231004 13:43:23.275"/>
</iter>
<iter>
<var name="${module}">without-nullok</var>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${regex_result}</var>
<var>${regex_message}</var>
<arg>Should Match Regexp</arg>
<arg>${output}</arg>
<arg>${module}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>${module}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231004 13:43:23.276" endtime="20231004 13:43:23.276"/>
</kw>
<msg timestamp="20231004 13:43:23.276" level="INFO">${regex_result} = PASS</msg>
<msg timestamp="20231004 13:43:23.276" level="INFO">${regex_message} = without-nullok</msg>
<status status="PASS" starttime="20231004 13:43:23.275" endtime="20231004 13:43:23.276"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${module_status_dict}</arg>
<arg>${module}</arg>
<arg>${regex_result}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20231004 13:43:23.276" endtime="20231004 13:43:23.277"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.275" endtime="20231004 13:43:23.277"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.272" endtime="20231004 13:43:23.277"/>
</for>
<kw name="Log" library="BuiltIn">
<arg>${module_status_dict}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.277" level="INFO">{'with-faillock': 'PASS', 'without-nullok': 'PASS'}</msg>
<status status="PASS" starttime="20231004 13:43:23.277" endtime="20231004 13:43:23.278"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Dictionary Should Not Contain Value</arg>
<arg>${module_status_dict}</arg>
<arg>FAIL</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<arg>${module_status_dict}</arg>
<arg>FAIL</arg>
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20231004 13:43:23.278" endtime="20231004 13:43:23.279"/>
</kw>
<msg timestamp="20231004 13:43:23.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.279" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.278" endtime="20231004 13:43:23.279"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${status}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.279" level="INFO">PASS</msg>
<status status="PASS" starttime="20231004 13:43:23.279" endtime="20231004 13:43:23.279"/>
</kw>
<if>
<branch type="IF" condition="'FAIL' in '${status}'">
<kw name="Fail" library="BuiltIn">
<arg>Expected PAM enabled-feature not found</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.280" endtime="20231004 13:43:23.281"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.280" endtime="20231004 13:43:23.281"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.280" endtime="20231004 13:43:23.281"/>
</if>
<doc>This test will verify that without-nullok and with-faillock modules are activated
the test will run the command "autheselect current" which returns the enabled features in the
format:

Profile ID: custom/sssd-vf
Enabled features:
- with-faillock
- without-nullok

Checks made against the following features: ['with-faillock', 'without-nullok']</doc>
<tag>security</tag>
<status status="PASS" starttime="20231004 13:43:23.252" endtime="20231004 13:43:23.281"/>
</test>
<test id="s1-s1-t6" name="Check the password-auth file has been updated" line="87">
<kw name="Step. View the contents of the file: '/etc/authselect/custom/sssd-vf/password-auth'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.285" level="INFO">View the contents of the file: '/etc/authselect/custom/sssd-vf/password-auth'</msg>
<status status="PASS" starttime="20231004 13:43:23.285" endtime="20231004 13:43:23.285"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.284" endtime="20231004 13:43:23.285"/>
</kw>
<kw name="Step. Locate the 'pam_unix.so' entry in the auth section, verify that the definition includes 'try_first_pass'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.287" level="INFO">Locate the 'pam_unix.so' entry in the auth section, verify that the definition includes 'try_first_pass'</msg>
<status status="PASS" starttime="20231004 13:43:23.286" endtime="20231004 13:43:23.287"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.286" endtime="20231004 13:43:23.287"/>
</kw>
<kw name="Step. Locate the 'pam_pwquality.so' entry in the password section, verify that the definition includes 'try_first_pass'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.288" level="INFO">Locate the 'pam_pwquality.so' entry in the password section, verify that the definition includes 'try_first_pass'</msg>
<status status="PASS" starttime="20231004 13:43:23.288" endtime="20231004 13:43:23.288"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.287" endtime="20231004 13:43:23.288"/>
</kw>
<kw name="Step. Locate the 'pam_unix.so' entry in the password section, verify the definition includes 'try_first_pass'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.290" level="INFO">Locate the 'pam_unix.so' entry in the password section, verify the definition includes 'try_first_pass'</msg>
<status status="PASS" starttime="20231004 13:43:23.289" endtime="20231004 13:43:23.290"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.289" endtime="20231004 13:43:23.290"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${check_dict}</var>
<arg>auth.*pam_unix.so={if not "without-nullok":nullok} try_first_pass</arg>
<arg>password.*pam_pwquality.so=try_first_pass local_users_only</arg>
<arg>password.*pam_unix.so sha512 shadow={if not "without-nullok":nullok} try_first_pass use_authtok</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231004 13:43:23.291" level="INFO">${check_dict} = {'auth.*pam_unix.so': '{if not "without-nullok":nullok} try_first_pass', 'password.*pam_pwquality.so': 'try_first_pass local_users_only', 'password.*pam_unix.so sha512 shadow': '{if not "without-nullo...</msg>
<status status="PASS" starttime="20231004 13:43:23.290" endtime="20231004 13:43:23.291"/>
</kw>
<kw name="Get File" library="OperatingSystem">
<var>${password_auth}</var>
<arg>/etc/authselect/custom/sssd-vf/password-auth</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20231004 13:43:23.291" level="INFO" html="true">Getting file '&lt;a href="file:///etc/authselect/custom/sssd-vf/password-auth"&gt;/etc/authselect/custom/sssd-vf/password-auth&lt;/a&gt;'.</msg>
<msg timestamp="20231004 13:43:23.292" level="INFO">${password_auth} = auth        required                                     pam_env.so
auth        required                                     pam_faildelay.so delay=2000000
auth        required                        ...</msg>
<status status="PASS" starttime="20231004 13:43:23.291" endtime="20231004 13:43:23.292"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${error_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.292" level="INFO">${error_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.292" endtime="20231004 13:43:23.292"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<var>${value}</var>
<value>&amp;{check_dict}</value>
<iter>
<var name="${key}">auth.*pam_unix.so</var>
<var name="${value}">{if not "without-nullok":nullok} try_first_pass</var>
<kw name="Log" library="BuiltIn">
<arg>${key} : ${value}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.293" level="INFO">auth.*pam_unix.so : {if not "without-nullok":nullok} try_first_pass</msg>
<status status="PASS" starttime="20231004 13:43:23.293" endtime="20231004 13:43:23.293"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${matches}</var>
<arg>${password_auth}</arg>
<arg>\\s?${key}\\s?(.*)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.294" level="INFO">${matches} = ['{if not "without-nullok":nullok}']</msg>
<status status="PASS" starttime="20231004 13:43:23.294" endtime="20231004 13:43:23.294"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${len}</var>
<arg>${matches}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.295" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.295" level="INFO">${len} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.295" endtime="20231004 13:43:23.296"/>
</kw>
<if>
<branch type="IF" condition="${len} &gt; 0">
<kw name="Log" library="BuiltIn">
<arg>Match Found match ${key} : ${matches}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.296" level="INFO">Match Found match auth.*pam_unix.so : ['{if not "without-nullok":nullok}']</msg>
<status status="PASS" starttime="20231004 13:43:23.296" endtime="20231004 13:43:23.297"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${matches[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.298" level="INFO">{if not "without-nullok":nullok}</msg>
<status status="PASS" starttime="20231004 13:43:23.297" endtime="20231004 13:43:23.298"/>
</kw>
<if>
<branch type="IF" condition="'${value}' == '${matches[0]}'">
<kw name="Log" library="BuiltIn">
<arg>'${key}' Configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.299" endtime="20231004 13:43:23.299"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.298" endtime="20231004 13:43:23.299"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>${key} Not configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.299" level="INFO">auth.*pam_unix.so Not configured as expected</msg>
<status status="PASS" starttime="20231004 13:43:23.299" endtime="20231004 13:43:23.299"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.300" endtime="20231004 13:43:23.300"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.299" endtime="20231004 13:43:23.300"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.298" endtime="20231004 13:43:23.300"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.296" endtime="20231004 13:43:23.300"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>No Match found for : ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.300" endtime="20231004 13:43:23.300"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.300" endtime="20231004 13:43:23.300"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.300" endtime="20231004 13:43:23.301"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.296" endtime="20231004 13:43:23.301"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.293" endtime="20231004 13:43:23.301"/>
</iter>
<iter>
<var name="${key}">password.*pam_pwquality.so</var>
<var name="${value}">try_first_pass local_users_only</var>
<kw name="Log" library="BuiltIn">
<arg>${key} : ${value}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.301" level="INFO">password.*pam_pwquality.so : try_first_pass local_users_only</msg>
<status status="PASS" starttime="20231004 13:43:23.301" endtime="20231004 13:43:23.301"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${matches}</var>
<arg>${password_auth}</arg>
<arg>\\s?${key}\\s?(.*)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.303" level="INFO">${matches} = ['local_users_only']</msg>
<status status="PASS" starttime="20231004 13:43:23.302" endtime="20231004 13:43:23.303"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${len}</var>
<arg>${matches}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.303" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.303" level="INFO">${len} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.303" endtime="20231004 13:43:23.303"/>
</kw>
<if>
<branch type="IF" condition="${len} &gt; 0">
<kw name="Log" library="BuiltIn">
<arg>Match Found match ${key} : ${matches}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.304" level="INFO">Match Found match password.*pam_pwquality.so : ['local_users_only']</msg>
<status status="PASS" starttime="20231004 13:43:23.304" endtime="20231004 13:43:23.304"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${matches[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.305" level="INFO">local_users_only</msg>
<status status="PASS" starttime="20231004 13:43:23.305" endtime="20231004 13:43:23.305"/>
</kw>
<if>
<branch type="IF" condition="'${value}' == '${matches[0]}'">
<kw name="Log" library="BuiltIn">
<arg>'${key}' Configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.306" endtime="20231004 13:43:23.306"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.305" endtime="20231004 13:43:23.306"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>${key} Not configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.307" level="INFO">password.*pam_pwquality.so Not configured as expected</msg>
<status status="PASS" starttime="20231004 13:43:23.307" endtime="20231004 13:43:23.307"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.307" endtime="20231004 13:43:23.307"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.306" endtime="20231004 13:43:23.307"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.305" endtime="20231004 13:43:23.307"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.303" endtime="20231004 13:43:23.308"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>No Match found for : ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.308" endtime="20231004 13:43:23.309"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.309" endtime="20231004 13:43:23.309"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.308" endtime="20231004 13:43:23.309"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.303" endtime="20231004 13:43:23.309"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.301" endtime="20231004 13:43:23.309"/>
</iter>
<iter>
<var name="${key}">password.*pam_unix.so sha512 shadow</var>
<var name="${value}">{if not "without-nullok":nullok} try_first_pass use_authtok</var>
<kw name="Log" library="BuiltIn">
<arg>${key} : ${value}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.309" level="INFO">password.*pam_unix.so sha512 shadow : {if not "without-nullok":nullok} try_first_pass use_authtok</msg>
<status status="PASS" starttime="20231004 13:43:23.309" endtime="20231004 13:43:23.310"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${matches}</var>
<arg>${password_auth}</arg>
<arg>\\s?${key}\\s?(.*)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.310" level="INFO">${matches} = ['{if not "without-nullok":nullok} use_authtok']</msg>
<status status="PASS" starttime="20231004 13:43:23.310" endtime="20231004 13:43:23.311"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${len}</var>
<arg>${matches}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.311" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.311" level="INFO">${len} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.311" endtime="20231004 13:43:23.311"/>
</kw>
<if>
<branch type="IF" condition="${len} &gt; 0">
<kw name="Log" library="BuiltIn">
<arg>Match Found match ${key} : ${matches}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.312" level="INFO">Match Found match password.*pam_unix.so sha512 shadow : ['{if not "without-nullok":nullok} use_authtok']</msg>
<status status="PASS" starttime="20231004 13:43:23.311" endtime="20231004 13:43:23.312"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${matches[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.313" level="INFO">{if not "without-nullok":nullok} use_authtok</msg>
<status status="PASS" starttime="20231004 13:43:23.312" endtime="20231004 13:43:23.313"/>
</kw>
<if>
<branch type="IF" condition="'${value}' == '${matches[0]}'">
<kw name="Log" library="BuiltIn">
<arg>'${key}' Configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.314" endtime="20231004 13:43:23.314"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.313" endtime="20231004 13:43:23.314"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>${key} Not configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.314" level="INFO">password.*pam_unix.so sha512 shadow Not configured as expected</msg>
<status status="PASS" starttime="20231004 13:43:23.314" endtime="20231004 13:43:23.314"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.314" endtime="20231004 13:43:23.315"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.314" endtime="20231004 13:43:23.315"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.313" endtime="20231004 13:43:23.315"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.311" endtime="20231004 13:43:23.315"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>No Match found for : ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.315" endtime="20231004 13:43:23.315"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.315" endtime="20231004 13:43:23.315"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.315" endtime="20231004 13:43:23.316"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.311" endtime="20231004 13:43:23.316"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.309" endtime="20231004 13:43:23.316"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.293" endtime="20231004 13:43:23.316"/>
</for>
<kw name="Log" library="BuiltIn">
<arg>${error_list}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.316" level="INFO">['auth.*pam_unix.so', 'password.*pam_pwquality.so', 'password.*pam_unix.so sha512 shadow']</msg>
<status status="PASS" starttime="20231004 13:43:23.316" endtime="20231004 13:43:23.317"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${error_list}</arg>
<arg>Errors found in the following modules ${error_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.318" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.318" level="FAIL">Errors found in the following modules ['auth.*pam_unix.so', 'password.*pam_pwquality.so', 'password.*pam_unix.so sha512 shadow']</msg>
<status status="FAIL" starttime="20231004 13:43:23.317" endtime="20231004 13:43:23.318"/>
</kw>
<doc>Read the /etc/authselect/custom/sssd-vf/password-auth file
and check that the values have been modified the check takes a dict with
the module search string and the expected configuration as a k,v Pairs
the check then searches the file for the key and evaluates the value</doc>
<status status="FAIL" starttime="20231004 13:43:23.283" endtime="20231004 13:43:23.319">Errors found in the following modules ['auth.*pam_unix.so', 'password.*pam_pwquality.so', 'password.*pam_unix.so sha512 shadow']</status>
</test>
<test id="s1-s1-t7" name="Check the system-auth file has been updated" line="122">
<kw name="Step. View the contents of the file: '/etc/authselect/custom/sssd-vf/system-auth'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.324" level="INFO">View the contents of the file: '/etc/authselect/custom/sssd-vf/system-auth'</msg>
<status status="PASS" starttime="20231004 13:43:23.324" endtime="20231004 13:43:23.324"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.323" endtime="20231004 13:43:23.324"/>
</kw>
<kw name="Step. Locate the 'pam_unix.so' entry in the auth section, verify that the definition matches '{if not &quot;without-nullok&quot;:nullok} try_first_pass'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.326" level="INFO">Locate the 'pam_unix.so' entry in the auth section, verify that the definition matches '{if not "without-nullok":nullok} try_first_pass'</msg>
<status status="PASS" starttime="20231004 13:43:23.326" endtime="20231004 13:43:23.326"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.325" endtime="20231004 13:43:23.326"/>
</kw>
<kw name="Step. Locate the 'pam_pwquality.so' entry in the password section, verify that the definition matches 'try_first_pass local_users_only enforce-for-root retry=3 remember=12'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.327" level="INFO">Locate the 'pam_pwquality.so' entry in the password section, verify that the definition matches 'try_first_pass local_users_only enforce-for-root retry=3 remember=12'</msg>
<status status="PASS" starttime="20231004 13:43:23.327" endtime="20231004 13:43:23.327"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.327" endtime="20231004 13:43:23.328"/>
</kw>
<kw name="Step. Locate the 'pam_unix.so' entry in the password section, verify the definition matche '{if not &quot;without-nullok&quot;:nullok} try_first_pass use_authtok remember=12'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.329" level="INFO">Locate the 'pam_unix.so' entry in the password section, verify the definition matche '{if not "without-nullok":nullok} try_first_pass use_authtok remember=12'</msg>
<status status="PASS" starttime="20231004 13:43:23.329" endtime="20231004 13:43:23.329"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.328" endtime="20231004 13:43:23.329"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${check_dict}</var>
<arg>auth.*pam_unix.so={if not "without-nullok":nullok} try_first_pass</arg>
<arg>password.*pam_pwquality.so=try_first_pass local_users_only enforce-for-root retry=3 remember=12</arg>
<arg>password.*pam_unix.so sha512 shadow={if not "without-nullok":nullok} try_first_pass use_authtok remember=12</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231004 13:43:23.330" level="INFO">${check_dict} = {'auth.*pam_unix.so': '{if not "without-nullok":nullok} try_first_pass', 'password.*pam_pwquality.so': 'try_first_pass local_users_only enforce-for-root retry=3 remember=12', 'password.*pam_unix.so sh...</msg>
<status status="PASS" starttime="20231004 13:43:23.329" endtime="20231004 13:43:23.330"/>
</kw>
<kw name="Get File" library="OperatingSystem">
<var>${password_auth}</var>
<arg>/etc/authselect/custom/sssd-vf/system-auth</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20231004 13:43:23.330" level="INFO" html="true">Getting file '&lt;a href="file:///etc/authselect/custom/sssd-vf/system-auth"&gt;/etc/authselect/custom/sssd-vf/system-auth&lt;/a&gt;'.</msg>
<msg timestamp="20231004 13:43:23.331" level="INFO">${password_auth} = {imply "with-smartcard" if "with-smartcard-required"}
auth        required                                     pam_env.so
auth        required                                     pam_faildelay.so dela...</msg>
<status status="PASS" starttime="20231004 13:43:23.330" endtime="20231004 13:43:23.331"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${error_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.331" level="INFO">${error_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.331" endtime="20231004 13:43:23.332"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<var>${value}</var>
<value>&amp;{check_dict}</value>
<iter>
<var name="${key}">auth.*pam_unix.so</var>
<var name="${value}">{if not "without-nullok":nullok} try_first_pass</var>
<kw name="Log" library="BuiltIn">
<arg>${key} : ${value}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.333" level="INFO">auth.*pam_unix.so : {if not "without-nullok":nullok} try_first_pass</msg>
<status status="PASS" starttime="20231004 13:43:23.332" endtime="20231004 13:43:23.333"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${matches}</var>
<arg>${password_auth}</arg>
<arg>\\s?${key}\\s?(.*)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.334" level="INFO">${matches} = ['{if not "without-nullok":nullok}']</msg>
<status status="PASS" starttime="20231004 13:43:23.333" endtime="20231004 13:43:23.334"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${len}</var>
<arg>${matches}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.334" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.334" level="INFO">${len} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.334" endtime="20231004 13:43:23.334"/>
</kw>
<if>
<branch type="IF" condition="${len} &gt; 0">
<kw name="Log" library="BuiltIn">
<arg>Match Found match ${key} : ${matches}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.335" level="INFO">Match Found match auth.*pam_unix.so : ['{if not "without-nullok":nullok}']</msg>
<status status="PASS" starttime="20231004 13:43:23.335" endtime="20231004 13:43:23.335"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${matches[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.337" level="INFO">{if not "without-nullok":nullok}</msg>
<status status="PASS" starttime="20231004 13:43:23.335" endtime="20231004 13:43:23.337"/>
</kw>
<if>
<branch type="IF" condition="'${value}' == '${matches[0]}'">
<kw name="Log" library="BuiltIn">
<arg>${key} Configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.338" endtime="20231004 13:43:23.338"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.337" endtime="20231004 13:43:23.338"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>${key} Not configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.338" level="INFO">auth.*pam_unix.so Not configured as expected</msg>
<status status="PASS" starttime="20231004 13:43:23.338" endtime="20231004 13:43:23.339"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.339" endtime="20231004 13:43:23.339"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.338" endtime="20231004 13:43:23.339"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.337" endtime="20231004 13:43:23.339"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.334" endtime="20231004 13:43:23.340"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>No Match found for : ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.340" endtime="20231004 13:43:23.340"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.340" endtime="20231004 13:43:23.340"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.340" endtime="20231004 13:43:23.340"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.334" endtime="20231004 13:43:23.340"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.332" endtime="20231004 13:43:23.340"/>
</iter>
<iter>
<var name="${key}">password.*pam_pwquality.so</var>
<var name="${value}">try_first_pass local_users_only enforce-for-root retry=3 remember=12</var>
<kw name="Log" library="BuiltIn">
<arg>${key} : ${value}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.341" level="INFO">password.*pam_pwquality.so : try_first_pass local_users_only enforce-for-root retry=3 remember=12</msg>
<status status="PASS" starttime="20231004 13:43:23.340" endtime="20231004 13:43:23.341"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${matches}</var>
<arg>${password_auth}</arg>
<arg>\\s?${key}\\s?(.*)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.341" level="INFO">${matches} = ['local_users_only']</msg>
<status status="PASS" starttime="20231004 13:43:23.341" endtime="20231004 13:43:23.341"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${len}</var>
<arg>${matches}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.342" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.342" level="INFO">${len} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.341" endtime="20231004 13:43:23.342"/>
</kw>
<if>
<branch type="IF" condition="${len} &gt; 0">
<kw name="Log" library="BuiltIn">
<arg>Match Found match ${key} : ${matches}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.343" level="INFO">Match Found match password.*pam_pwquality.so : ['local_users_only']</msg>
<status status="PASS" starttime="20231004 13:43:23.343" endtime="20231004 13:43:23.343"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${matches[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.344" level="INFO">local_users_only</msg>
<status status="PASS" starttime="20231004 13:43:23.343" endtime="20231004 13:43:23.344"/>
</kw>
<if>
<branch type="IF" condition="'${value}' == '${matches[0]}'">
<kw name="Log" library="BuiltIn">
<arg>${key} Configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.345" endtime="20231004 13:43:23.345"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.344" endtime="20231004 13:43:23.345"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>${key} Not configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.346" level="INFO">password.*pam_pwquality.so Not configured as expected</msg>
<status status="PASS" starttime="20231004 13:43:23.345" endtime="20231004 13:43:23.346"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.346" endtime="20231004 13:43:23.346"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.345" endtime="20231004 13:43:23.346"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.344" endtime="20231004 13:43:23.346"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.342" endtime="20231004 13:43:23.346"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>No Match found for : ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.346" endtime="20231004 13:43:23.346"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.347" endtime="20231004 13:43:23.347"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.346" endtime="20231004 13:43:23.347"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.342" endtime="20231004 13:43:23.347"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.340" endtime="20231004 13:43:23.347"/>
</iter>
<iter>
<var name="${key}">password.*pam_unix.so sha512 shadow</var>
<var name="${value}">{if not "without-nullok":nullok} try_first_pass use_authtok remember=12</var>
<kw name="Log" library="BuiltIn">
<arg>${key} : ${value}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.347" level="INFO">password.*pam_unix.so sha512 shadow : {if not "without-nullok":nullok} try_first_pass use_authtok remember=12</msg>
<status status="PASS" starttime="20231004 13:43:23.347" endtime="20231004 13:43:23.347"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${matches}</var>
<arg>${password_auth}</arg>
<arg>\\s?${key}\\s?(.*)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.348" level="INFO">${matches} = ['{if not "without-nullok":nullok} use_authtok']</msg>
<status status="PASS" starttime="20231004 13:43:23.347" endtime="20231004 13:43:23.348"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${len}</var>
<arg>${matches}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.348" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.349" level="INFO">${len} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.348" endtime="20231004 13:43:23.349"/>
</kw>
<if>
<branch type="IF" condition="${len} &gt; 0">
<kw name="Log" library="BuiltIn">
<arg>Match Found match ${key} : ${matches}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.349" level="INFO">Match Found match password.*pam_unix.so sha512 shadow : ['{if not "without-nullok":nullok} use_authtok']</msg>
<status status="PASS" starttime="20231004 13:43:23.349" endtime="20231004 13:43:23.349"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${matches[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.350" level="INFO">{if not "without-nullok":nullok} use_authtok</msg>
<status status="PASS" starttime="20231004 13:43:23.349" endtime="20231004 13:43:23.350"/>
</kw>
<if>
<branch type="IF" condition="'${value}' == '${matches[0]}'">
<kw name="Log" library="BuiltIn">
<arg>${key} Configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.351" endtime="20231004 13:43:23.351"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.350" endtime="20231004 13:43:23.351"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>${key} Not configured as expected</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.353" level="INFO">password.*pam_unix.so sha512 shadow Not configured as expected</msg>
<status status="PASS" starttime="20231004 13:43:23.352" endtime="20231004 13:43:23.353"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.353" endtime="20231004 13:43:23.353"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.352" endtime="20231004 13:43:23.353"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.350" endtime="20231004 13:43:23.353"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.349" endtime="20231004 13:43:23.353"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>No Match found for : ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.353" endtime="20231004 13:43:23.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.354" endtime="20231004 13:43:23.354"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.353" endtime="20231004 13:43:23.354"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.349" endtime="20231004 13:43:23.354"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.347" endtime="20231004 13:43:23.354"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.332" endtime="20231004 13:43:23.354"/>
</for>
<kw name="Log" library="BuiltIn">
<arg>${error_list}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.355" level="INFO">['auth.*pam_unix.so', 'password.*pam_pwquality.so', 'password.*pam_unix.so sha512 shadow']</msg>
<status status="PASS" starttime="20231004 13:43:23.354" endtime="20231004 13:43:23.355"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${error_list}</arg>
<arg>Errors found in the following modules ${error_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.356" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.356" level="FAIL">Errors found in the following modules ['auth.*pam_unix.so', 'password.*pam_pwquality.so', 'password.*pam_unix.so sha512 shadow']</msg>
<status status="FAIL" starttime="20231004 13:43:23.356" endtime="20231004 13:43:23.356"/>
</kw>
<doc>Read the /etc/authselect/custom/sssd-vf/system-auth file
and check that the values have been modified the check takes a dict with
the module search string and the expected configuration as a k,v Pairs
the check then searches the file for the key and evaluates the value</doc>
<status status="FAIL" starttime="20231004 13:43:23.321" endtime="20231004 13:43:23.357">Errors found in the following modules ['auth.*pam_unix.so', 'password.*pam_pwquality.so', 'password.*pam_unix.so sha512 shadow']</status>
</test>
<test id="s1-s1-t8" name="Verify that faillock.conf has been modifed" line="158">
<kw name="Step. View the file /etc/security/faillock.conf" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.361" level="INFO">View the file /etc/security/faillock.conf</msg>
<status status="PASS" starttime="20231004 13:43:23.361" endtime="20231004 13:43:23.361"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.360" endtime="20231004 13:43:23.361"/>
</kw>
<kw name="Step. Verify that the 'fail_interval' is set to '1800'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.362" level="INFO">Verify that the 'fail_interval' is set to '1800'</msg>
<status status="PASS" starttime="20231004 13:43:23.362" endtime="20231004 13:43:23.362"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.361" endtime="20231004 13:43:23.363"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${dict}</var>
<arg>fail_interval=1800</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231004 13:43:23.364" level="INFO">${dict} = {'fail_interval': '1800'}</msg>
<status status="PASS" starttime="20231004 13:43:23.363" endtime="20231004 13:43:23.364"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${file_path}</var>
<arg>/etc/security/faillock.conf</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.364" level="INFO">${file_path} = /etc/security/faillock.conf</msg>
<status status="PASS" starttime="20231004 13:43:23.364" endtime="20231004 13:43:23.364"/>
</kw>
<kw name="Get Regexp Matches For Key Value Pairs in File" library="keywords">
<arg>${dict}</arg>
<arg>${file_path}</arg>
<doc>Iterates through Dict and searches for Key,Value pairs in file</doc>
<kw name="Log" library="BuiltIn">
<arg>${dict}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.365" level="INFO">{'fail_interval': '1800'}</msg>
<status status="PASS" starttime="20231004 13:43:23.365" endtime="20231004 13:43:23.366"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${file_path}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.366" level="INFO">/etc/security/faillock.conf</msg>
<status status="PASS" starttime="20231004 13:43:23.366" endtime="20231004 13:43:23.366"/>
</kw>
<kw name="Get File" library="OperatingSystem">
<var>${file}</var>
<arg>${file_path}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20231004 13:43:23.367" level="INFO" html="true">Getting file '&lt;a href="file:///etc/security/faillock.conf"&gt;/etc/security/faillock.conf&lt;/a&gt;'.</msg>
<msg timestamp="20231004 13:43:23.367" level="INFO">${file} = # Configuration for locking the user after multiple failed
# authentication attempts.
#
# The directory where the user files with the failure records are kept.
# The default is /var/run/faillock.
# di...</msg>
<status status="PASS" starttime="20231004 13:43:23.366" endtime="20231004 13:43:23.367"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${errors_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.367" level="INFO">${errors_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.367" endtime="20231004 13:43:23.367"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<var>${value}</var>
<value>&amp;{dict}</value>
<iter>
<var name="${key}">fail_interval</var>
<var name="${value}">1800</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.369" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.368" endtime="20231004 13:43:23.369"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.369" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.370" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.369" endtime="20231004 13:43:23.370"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.370" endtime="20231004 13:43:23.371"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.371" endtime="20231004 13:43:23.371"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.371" endtime="20231004 13:43:23.371"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.370" endtime="20231004 13:43:23.371"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.371" endtime="20231004 13:43:23.372"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.371" endtime="20231004 13:43:23.372"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.370" endtime="20231004 13:43:23.372"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.368" endtime="20231004 13:43:23.372"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.367" endtime="20231004 13:43:23.372"/>
</for>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${errors_list}</arg>
<arg>Errors found in values for ${errors_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.372" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.373" level="FAIL">Errors found in values for ['fail_interval']</msg>
<status status="FAIL" starttime="20231004 13:43:23.372" endtime="20231004 13:43:23.373"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:23.365" endtime="20231004 13:43:23.373"/>
</kw>
<doc>We are required to modify the fail_interval to be = 1800 seconds</doc>
<tag>security</tag>
<status status="FAIL" starttime="20231004 13:43:23.359" endtime="20231004 13:43:23.373">Errors found in values for ['fail_interval']</status>
</test>
<test id="s1-s1-t9" name="Verify that pwquality.conf has been modified" line="167">
<kw name="Step. View the file '/etc/security/pwquality.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.377" level="INFO">View the file '/etc/security/pwquality.conf'</msg>
<status status="PASS" starttime="20231004 13:43:23.377" endtime="20231004 13:43:23.377"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.376" endtime="20231004 13:43:23.377"/>
</kw>
<kw name="Step. Validate that the attributes are assigned the correct values, see above" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.378" level="INFO">Validate that the attributes are assigned the correct values, see above</msg>
<status status="PASS" starttime="20231004 13:43:23.378" endtime="20231004 13:43:23.378"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.378" endtime="20231004 13:43:23.378"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${dict}</var>
<arg>minlen=8</arg>
<arg>dcredit=-1</arg>
<arg>ucredit=-1</arg>
<arg>lcredit=-1</arg>
<arg>ocredit=-1</arg>
<arg>dummy=1</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231004 13:43:23.379" level="INFO">${dict} = {'minlen': '8', 'dcredit': '-1', 'ucredit': '-1', 'lcredit': '-1', 'ocredit': '-1', 'dummy': '1'}</msg>
<status status="PASS" starttime="20231004 13:43:23.379" endtime="20231004 13:43:23.379"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${file_path}</var>
<arg>/etc/security/pwquality.conf</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.381" level="INFO">${file_path} = /etc/security/pwquality.conf</msg>
<status status="PASS" starttime="20231004 13:43:23.380" endtime="20231004 13:43:23.381"/>
</kw>
<kw name="Get Regexp Matches For Key Value Pairs in File" library="keywords">
<arg>${dict}</arg>
<arg>${file_path}</arg>
<doc>Iterates through Dict and searches for Key,Value pairs in file</doc>
<kw name="Log" library="BuiltIn">
<arg>${dict}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.382" level="INFO">{'minlen': '8', 'dcredit': '-1', 'ucredit': '-1', 'lcredit': '-1', 'ocredit': '-1', 'dummy': '1'}</msg>
<status status="PASS" starttime="20231004 13:43:23.382" endtime="20231004 13:43:23.382"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${file_path}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.382" level="INFO">/etc/security/pwquality.conf</msg>
<status status="PASS" starttime="20231004 13:43:23.382" endtime="20231004 13:43:23.383"/>
</kw>
<kw name="Get File" library="OperatingSystem">
<var>${file}</var>
<arg>${file_path}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20231004 13:43:23.383" level="INFO" html="true">Getting file '&lt;a href="file:///etc/security/pwquality.conf"&gt;/etc/security/pwquality.conf&lt;/a&gt;'.</msg>
<msg timestamp="20231004 13:43:23.383" level="INFO">${file} = # Configuration for systemwide password quality limits
# Defaults:
#
# Number of characters in the new password that must not be present in the
# old password.
# difok = 1
#
# Minimum acceptable size ...</msg>
<status status="PASS" starttime="20231004 13:43:23.383" endtime="20231004 13:43:23.383"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${errors_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.384" level="INFO">${errors_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.383" endtime="20231004 13:43:23.384"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<var>${value}</var>
<value>&amp;{dict}</value>
<iter>
<var name="${key}">minlen</var>
<var name="${value}">8</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.385" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.384" endtime="20231004 13:43:23.385"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.386" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.386" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.385" endtime="20231004 13:43:23.386"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.386" endtime="20231004 13:43:23.386"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.387" endtime="20231004 13:43:23.387"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.387" endtime="20231004 13:43:23.387"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.386" endtime="20231004 13:43:23.387"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.387" endtime="20231004 13:43:23.388"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.387" endtime="20231004 13:43:23.388"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.386" endtime="20231004 13:43:23.388"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.384" endtime="20231004 13:43:23.388"/>
</iter>
<iter>
<var name="${key}">dcredit</var>
<var name="${value}">-1</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.389" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.388" endtime="20231004 13:43:23.389"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.389" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.389" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.389" endtime="20231004 13:43:23.389"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.390" endtime="20231004 13:43:23.390"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.390" endtime="20231004 13:43:23.390"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.390" endtime="20231004 13:43:23.390"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.389" endtime="20231004 13:43:23.390"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.390" endtime="20231004 13:43:23.391"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.390" endtime="20231004 13:43:23.391"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.389" endtime="20231004 13:43:23.391"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.388" endtime="20231004 13:43:23.391"/>
</iter>
<iter>
<var name="${key}">ucredit</var>
<var name="${value}">-1</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.393" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.391" endtime="20231004 13:43:23.393"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.393" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.393" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.393" endtime="20231004 13:43:23.393"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.394" endtime="20231004 13:43:23.394"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.394" endtime="20231004 13:43:23.394"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.394" endtime="20231004 13:43:23.394"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.393" endtime="20231004 13:43:23.394"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.394" endtime="20231004 13:43:23.395"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.394" endtime="20231004 13:43:23.395"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.393" endtime="20231004 13:43:23.395"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.391" endtime="20231004 13:43:23.395"/>
</iter>
<iter>
<var name="${key}">lcredit</var>
<var name="${value}">-1</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.396" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.395" endtime="20231004 13:43:23.396"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.396" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.397" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.396" endtime="20231004 13:43:23.397"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.397" endtime="20231004 13:43:23.397"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.397" endtime="20231004 13:43:23.397"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.397" endtime="20231004 13:43:23.397"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.397" endtime="20231004 13:43:23.397"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.398" endtime="20231004 13:43:23.398"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.398" endtime="20231004 13:43:23.398"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.397" endtime="20231004 13:43:23.398"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.395" endtime="20231004 13:43:23.398"/>
</iter>
<iter>
<var name="${key}">ocredit</var>
<var name="${value}">-1</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.399" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.399" endtime="20231004 13:43:23.399"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.400" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.400" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.400" endtime="20231004 13:43:23.400"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.400" endtime="20231004 13:43:23.400"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.401" endtime="20231004 13:43:23.401"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.401" endtime="20231004 13:43:23.401"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.400" endtime="20231004 13:43:23.401"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.401" endtime="20231004 13:43:23.401"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.401" endtime="20231004 13:43:23.401"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.400" endtime="20231004 13:43:23.401"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.399" endtime="20231004 13:43:23.401"/>
</iter>
<iter>
<var name="${key}">dummy</var>
<var name="${value}">1</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.403" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.402" endtime="20231004 13:43:23.403"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.403" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.403" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.403" endtime="20231004 13:43:23.403"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.403" endtime="20231004 13:43:23.404"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.404" endtime="20231004 13:43:23.404"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.404" endtime="20231004 13:43:23.404"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.403" endtime="20231004 13:43:23.404"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.404" endtime="20231004 13:43:23.404"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.404" endtime="20231004 13:43:23.404"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.403" endtime="20231004 13:43:23.404"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.402" endtime="20231004 13:43:23.404"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.384" endtime="20231004 13:43:23.405"/>
</for>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${errors_list}</arg>
<arg>Errors found in values for ${errors_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.405" level="INFO">Length is 6</msg>
<msg timestamp="20231004 13:43:23.405" level="FAIL">Errors found in values for ['minlen', 'dcredit', 'ucredit', 'lcredit', 'ocredit', 'dummy']</msg>
<status status="FAIL" starttime="20231004 13:43:23.405" endtime="20231004 13:43:23.405"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:23.381" endtime="20231004 13:43:23.405"/>
</kw>
<doc>We are required to modify the /etc/security/pwquality.conf
to ensure only complex passwords are allowed following values should be used:
- minlen  =  8
- dcredit = -1
- ucredit = -1
- lcredit = -1
- ocredit = -1</doc>
<tag>security</tag>
<status status="FAIL" starttime="20231004 13:43:23.375" endtime="20231004 13:43:23.406">Errors found in values for ['minlen', 'dcredit', 'ucredit', 'lcredit', 'ocredit', 'dummy']</status>
</test>
<test id="s1-s1-t10" name="Verify login.defs has been modifed" line="182">
<kw name="Step. View the file '/etc/login.defs'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.409" level="INFO">View the file '/etc/login.defs'</msg>
<status status="PASS" starttime="20231004 13:43:23.409" endtime="20231004 13:43:23.410"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.409" endtime="20231004 13:43:23.410"/>
</kw>
<kw name="Step. Validate that the attributes are assigned the correct values, see above" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.411" level="INFO">Validate that the attributes are assigned the correct values, see above</msg>
<status status="PASS" starttime="20231004 13:43:23.410" endtime="20231004 13:43:23.411"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.410" endtime="20231004 13:43:23.411"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${dict}</var>
<arg>PASS_MAX_DAYS=90</arg>
<arg>PASS_MIN_DAYS=1</arg>
<arg>PASS_MIN_LEN=5</arg>
<arg>PASS_WARN_AGE=5</arg>
<arg>dummy=5</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231004 13:43:23.412" level="INFO">${dict} = {'PASS_MAX_DAYS': '90', 'PASS_MIN_DAYS': '1', 'PASS_MIN_LEN': '5', 'PASS_WARN_AGE': '5', 'dummy': '5'}</msg>
<status status="PASS" starttime="20231004 13:43:23.412" endtime="20231004 13:43:23.412"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${file_path}</var>
<arg>/etc/login.defs</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.413" level="INFO">${file_path} = /etc/login.defs</msg>
<status status="PASS" starttime="20231004 13:43:23.412" endtime="20231004 13:43:23.413"/>
</kw>
<kw name="Get Regexp Matches For Key Value Pairs in File" library="keywords">
<arg>${dict}</arg>
<arg>${file_path}</arg>
<doc>Iterates through Dict and searches for Key,Value pairs in file</doc>
<kw name="Log" library="BuiltIn">
<arg>${dict}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.414" level="INFO">{'PASS_MAX_DAYS': '90', 'PASS_MIN_DAYS': '1', 'PASS_MIN_LEN': '5', 'PASS_WARN_AGE': '5', 'dummy': '5'}</msg>
<status status="PASS" starttime="20231004 13:43:23.414" endtime="20231004 13:43:23.415"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${file_path}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.415" level="INFO">/etc/login.defs</msg>
<status status="PASS" starttime="20231004 13:43:23.415" endtime="20231004 13:43:23.415"/>
</kw>
<kw name="Get File" library="OperatingSystem">
<var>${file}</var>
<arg>${file_path}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20231004 13:43:23.415" level="INFO" html="true">Getting file '&lt;a href="file:///etc/login.defs"&gt;/etc/login.defs&lt;/a&gt;'.</msg>
<msg timestamp="20231004 13:43:23.416" level="INFO">${file} = #
# Please note that the parameters in this configuration file control the
# behavior of the tools from the shadow-utils component. None of these
# tools uses the PAM mechanism, and the utilities that...</msg>
<status status="PASS" starttime="20231004 13:43:23.415" endtime="20231004 13:43:23.416"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${errors_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.416" level="INFO">${errors_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.416" endtime="20231004 13:43:23.416"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<var>${value}</var>
<value>&amp;{dict}</value>
<iter>
<var name="${key}">PASS_MAX_DAYS</var>
<var name="${value}">90</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.417" level="INFO">${match} = ['99999']</msg>
<status status="PASS" starttime="20231004 13:43:23.417" endtime="20231004 13:43:23.417"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.418" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.418" level="INFO">${number_of_results} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.418" endtime="20231004 13:43:23.418"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20231004 13:43:23.420" level="INFO">${match_val} = 99999</msg>
<status status="PASS" starttime="20231004 13:43:23.418" endtime="20231004 13:43:23.420"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231004 13:43:23.421" level="FAIL">99999 != 90</msg>
<status status="FAIL" starttime="20231004 13:43:23.420" endtime="20231004 13:43:23.421"/>
</kw>
<msg timestamp="20231004 13:43:23.421" level="INFO">${status} = FAIL</msg>
<msg timestamp="20231004 13:43:23.421" level="INFO">${status_message} = 99999 != 90</msg>
<status status="PASS" starttime="20231004 13:43:23.420" endtime="20231004 13:43:23.421"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.422" endtime="20231004 13:43:23.422"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.421" endtime="20231004 13:43:23.422"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.418" endtime="20231004 13:43:23.422"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.422" endtime="20231004 13:43:23.422"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.422" endtime="20231004 13:43:23.422"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.418" endtime="20231004 13:43:23.422"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.416" endtime="20231004 13:43:23.422"/>
</iter>
<iter>
<var name="${key}">PASS_MIN_DAYS</var>
<var name="${value}">1</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.424" level="INFO">${match} = ['0']</msg>
<status status="PASS" starttime="20231004 13:43:23.423" endtime="20231004 13:43:23.424"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.424" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.424" level="INFO">${number_of_results} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.424" endtime="20231004 13:43:23.424"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20231004 13:43:23.425" level="INFO">${match_val} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.424" endtime="20231004 13:43:23.426"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231004 13:43:23.427" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20231004 13:43:23.428" level="FAIL">'None' cannot be converted to an integer: TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'</msg>
<status status="FAIL" starttime="20231004 13:43:23.427" endtime="20231004 13:43:23.428"/>
</kw>
<msg timestamp="20231004 13:43:23.428" level="INFO">${status} = FAIL</msg>
<msg timestamp="20231004 13:43:23.428" level="INFO">${status_message} = 'None' cannot be converted to an integer: TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'</msg>
<status status="PASS" starttime="20231004 13:43:23.426" endtime="20231004 13:43:23.428"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.428" endtime="20231004 13:43:23.429"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.428" endtime="20231004 13:43:23.429"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.424" endtime="20231004 13:43:23.429"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.429" endtime="20231004 13:43:23.429"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.429" endtime="20231004 13:43:23.429"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.424" endtime="20231004 13:43:23.429"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.423" endtime="20231004 13:43:23.429"/>
</iter>
<iter>
<var name="${key}">PASS_MIN_LEN</var>
<var name="${value}">5</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.431" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.430" endtime="20231004 13:43:23.431"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.431" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.431" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.431" endtime="20231004 13:43:23.431"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.432" endtime="20231004 13:43:23.432"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.432" endtime="20231004 13:43:23.432"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.432" endtime="20231004 13:43:23.432"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.431" endtime="20231004 13:43:23.432"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.433" endtime="20231004 13:43:23.433"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.432" endtime="20231004 13:43:23.433"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.431" endtime="20231004 13:43:23.433"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.429" endtime="20231004 13:43:23.433"/>
</iter>
<iter>
<var name="${key}">PASS_WARN_AGE</var>
<var name="${value}">5</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.434" level="INFO">${match} = ['7']</msg>
<status status="PASS" starttime="20231004 13:43:23.433" endtime="20231004 13:43:23.434"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.435" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.435" level="INFO">${number_of_results} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.435" endtime="20231004 13:43:23.435"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20231004 13:43:23.437" level="INFO">${match_val} = 7</msg>
<status status="PASS" starttime="20231004 13:43:23.435" endtime="20231004 13:43:23.437"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231004 13:43:23.438" level="FAIL">7 != 5</msg>
<status status="FAIL" starttime="20231004 13:43:23.438" endtime="20231004 13:43:23.438"/>
</kw>
<msg timestamp="20231004 13:43:23.438" level="INFO">${status} = FAIL</msg>
<msg timestamp="20231004 13:43:23.438" level="INFO">${status_message} = 7 != 5</msg>
<status status="PASS" starttime="20231004 13:43:23.437" endtime="20231004 13:43:23.438"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.439" endtime="20231004 13:43:23.439"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.439" endtime="20231004 13:43:23.439"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.435" endtime="20231004 13:43:23.439"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.440" endtime="20231004 13:43:23.440"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.439" endtime="20231004 13:43:23.440"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.435" endtime="20231004 13:43:23.440"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.433" endtime="20231004 13:43:23.440"/>
</iter>
<iter>
<var name="${key}">dummy</var>
<var name="${value}">5</var>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${file}</arg>
<arg>(?m)^\\s?${key}\\s*=?\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.441" level="INFO">${match} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.440" endtime="20231004 13:43:23.441"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${number_of_results}</var>
<arg>${match}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.441" level="INFO">Length is 0</msg>
<msg timestamp="20231004 13:43:23.441" level="INFO">${number_of_results} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.441" endtime="20231004 13:43:23.442"/>
</kw>
<if>
<branch type="IF" condition="${number_of_results} &gt; 0">
<kw name="Set Variable If" library="BuiltIn">
<var>${match_val}</var>
<arg>${match[0]}</arg>
<arg>${match[0]}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.442" endtime="20231004 13:43:23.442"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Be Equal As Integers</arg>
<arg>${match_val}</arg>
<arg>${value}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.442" endtime="20231004 13:43:23.442"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.442" endtime="20231004 13:43:23.442"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.442" endtime="20231004 13:43:23.442"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${errors_list}</arg>
<arg>${key}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.442" endtime="20231004 13:43:23.443"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.442" endtime="20231004 13:43:23.443"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.442" endtime="20231004 13:43:23.443"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.440" endtime="20231004 13:43:23.443"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.416" endtime="20231004 13:43:23.443"/>
</for>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${errors_list}</arg>
<arg>Errors found in values for ${errors_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.443" level="INFO">Length is 5</msg>
<msg timestamp="20231004 13:43:23.443" level="FAIL">Errors found in values for ['PASS_MAX_DAYS', 'PASS_MIN_DAYS', 'PASS_MIN_LEN', 'PASS_WARN_AGE', 'dummy']</msg>
<status status="FAIL" starttime="20231004 13:43:23.443" endtime="20231004 13:43:23.444"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:23.413" endtime="20231004 13:43:23.444"/>
</kw>
<doc>Password expiration values need to be modified in the /etc/login.defs file the
default values need to be modified to meet the following requirements:
- PASS_MIN_LEN    5
- PASS_MAX_DAYS   90
- PASS_MIN_DAYS   1
- PASS_WARN_AGE   5</doc>
<tag>security</tag>
<status status="FAIL" starttime="20231004 13:43:23.408" endtime="20231004 13:43:23.444">Errors found in values for ['PASS_MAX_DAYS', 'PASS_MIN_DAYS', 'PASS_MIN_LEN', 'PASS_WARN_AGE', 'dummy']</status>
</test>
<test id="s1-s1-t11" name="Verify the user account inavtive days value has been modified" line="197">
<kw name="Step. View the file '/etc/default/useradd'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.448" level="INFO">View the file '/etc/default/useradd'</msg>
<status status="PASS" starttime="20231004 13:43:23.448" endtime="20231004 13:43:23.448"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.447" endtime="20231004 13:43:23.448"/>
</kw>
<kw name="Step. Validate that the attributes are assigned the correct values, see above" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.449" level="INFO">Validate that the attributes are assigned the correct values, see above</msg>
<status status="PASS" starttime="20231004 13:43:23.449" endtime="20231004 13:43:23.449"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.449" endtime="20231004 13:43:23.449"/>
</kw>
<kw name="Get File" library="OperatingSystem">
<var>${useradd_conf}</var>
<arg>/etc/default/useradd</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20231004 13:43:23.450" level="INFO" html="true">Getting file '&lt;a href="file:///etc/default/useradd"&gt;/etc/default/useradd&lt;/a&gt;'.</msg>
<msg timestamp="20231004 13:43:23.450" level="INFO">${useradd_conf} = # useradd defaults file
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes

</msg>
<status status="PASS" starttime="20231004 13:43:23.450" endtime="20231004 13:43:23.450"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${match}</var>
<arg>${useradd_conf}</arg>
<arg>(?m)^\\s?INACTIVE\\s?\=\\s?(-?\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.452" level="INFO">${match} = ['-1']</msg>
<status status="PASS" starttime="20231004 13:43:23.451" endtime="20231004 13:43:23.452"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${match_val}</var>
<arg>${match}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20231004 13:43:23.453" level="INFO">${match_val} = -1</msg>
<status status="PASS" starttime="20231004 13:43:23.453" endtime="20231004 13:43:23.453"/>
</kw>
<if>
<branch type="IF" condition="${match_val} != 90">
<kw name="Fail" library="BuiltIn">
<arg>INACTIVE not set to expected value</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20231004 13:43:23.454" level="FAIL">INACTIVE not set to expected value</msg>
<status status="FAIL" starttime="20231004 13:43:23.454" endtime="20231004 13:43:23.455"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:23.454" endtime="20231004 13:43:23.455"/>
</branch>
<status status="FAIL" starttime="20231004 13:43:23.454" endtime="20231004 13:43:23.455"/>
</if>
<doc>The default value of INACTIVE in /etc/defaults/useradd is set to -1 which
equates to no inactvity time out for user. We need to change this value to 90 as per
request from Customer</doc>
<tag>security</tag>
<status status="FAIL" starttime="20231004 13:43:23.446" endtime="20231004 13:43:23.455">INACTIVE not set to expected value</status>
</test>
<doc>The following tests verify the security configuration that are expected to be implemented
on the redhat servers that will host the Cisco NSO application
- firewall Service Configrations
- autheselect custome profile creation and modifications
- PAM Configrations
- Password quality modifications
Refer to the SCDP documentation to address any failed tests.</doc>
<status status="FAIL" starttime="20231004 13:43:22.682" endtime="20231004 13:43:23.458"/>
</suite>
<suite id="s1-s2" name="NSO Operating System (RHEL) Validations" source="/mnt/vm-shared/robot-dev/rhel-dev/system.v2.robot">
<test id="s1-s2-t1" name="Verify dependency packages are installed" line="30">
<kw name="Step. Run the command 'rpm -q {package_name}' and verify the neccessary packages are installed" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.474" level="INFO">Run the command 'rpm -q {package_name}' and verify the neccessary packages are installed</msg>
<status status="PASS" starttime="20231004 13:43:23.474" endtime="20231004 13:43:23.474"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.473" endtime="20231004 13:43:23.475"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${command}</var>
<arg>rpm -q</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.476" level="INFO">${command} = rpm -q</msg>
<status status="PASS" starttime="20231004 13:43:23.476" endtime="20231004 13:43:23.476"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${check_string}</var>
<arg>not installed</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.476" level="INFO">${check_string} = not installed</msg>
<status status="PASS" starttime="20231004 13:43:23.476" endtime="20231004 13:43:23.477"/>
</kw>
<kw name="Iterate Over List and Run Command" library="keywords">
<arg>${package_list}</arg>
<arg>${command}</arg>
<arg>${check_string}</arg>
<doc>Iterates through list and runs the provided command, checking that the error string is not in the response</doc>
<kw name="Log" library="BuiltIn">
<arg>${list}</arg>
<arg>DEBUG</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" starttime="20231004 13:43:23.477" endtime="20231004 13:43:23.478"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${errors_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.478" level="INFO">${errors_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.478" endtime="20231004 13:43:23.478"/>
</kw>
<for flavor="IN">
<var>${item}</var>
<value>@{list}</value>
<iter>
<var name="${item}">ant</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.479" level="INFO">${run_cmd} = rpm -q ant</msg>
<status status="PASS" starttime="20231004 13:43:23.478" endtime="20231004 13:43:23.479"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.479" level="INFO">rpm -q ant</msg>
<status status="PASS" starttime="20231004 13:43:23.479" endtime="20231004 13:43:23.479"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.482" level="INFO">Running command 'rpm -q ant 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.499" level="INFO">${output} = ant-1.10.9-7.el9.noarch</msg>
<status status="PASS" starttime="20231004 13:43:23.479" endtime="20231004 13:43:23.499"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.500" endtime="20231004 13:43:23.500"/>
</kw>
<msg timestamp="20231004 13:43:23.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.501" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.499" endtime="20231004 13:43:23.501"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.501" endtime="20231004 13:43:23.501"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.478" endtime="20231004 13:43:23.501"/>
</iter>
<iter>
<var name="${item}">java-11-openjdk</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.502" level="INFO">${run_cmd} = rpm -q java-11-openjdk</msg>
<status status="PASS" starttime="20231004 13:43:23.502" endtime="20231004 13:43:23.502"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.503" level="INFO">rpm -q java-11-openjdk</msg>
<status status="PASS" starttime="20231004 13:43:23.503" endtime="20231004 13:43:23.503"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.507" level="INFO">Running command 'rpm -q java-11-openjdk 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.522" level="INFO">${output} = java-11-openjdk-11.0.18.0.10-2.el9_1.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.503" endtime="20231004 13:43:23.522"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.523" endtime="20231004 13:43:23.524"/>
</kw>
<msg timestamp="20231004 13:43:23.524" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.524" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.523" endtime="20231004 13:43:23.524"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.524" endtime="20231004 13:43:23.525"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.502" endtime="20231004 13:43:23.525"/>
</iter>
<iter>
<var name="${item}">python3</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.525" level="INFO">${run_cmd} = rpm -q python3</msg>
<status status="PASS" starttime="20231004 13:43:23.525" endtime="20231004 13:43:23.525"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.526" level="INFO">rpm -q python3</msg>
<status status="PASS" starttime="20231004 13:43:23.525" endtime="20231004 13:43:23.526"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.532" level="INFO">Running command 'rpm -q python3 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.547" level="INFO">${output} = python3-3.9.16-1.el9.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.526" endtime="20231004 13:43:23.547"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.548" endtime="20231004 13:43:23.549"/>
</kw>
<msg timestamp="20231004 13:43:23.549" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.549" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.547" endtime="20231004 13:43:23.549"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.549" endtime="20231004 13:43:23.549"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.525" endtime="20231004 13:43:23.549"/>
</iter>
<iter>
<var name="${item}">openssl</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.550" level="INFO">${run_cmd} = rpm -q openssl</msg>
<status status="PASS" starttime="20231004 13:43:23.550" endtime="20231004 13:43:23.550"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.550" level="INFO">rpm -q openssl</msg>
<status status="PASS" starttime="20231004 13:43:23.550" endtime="20231004 13:43:23.551"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.553" level="INFO">Running command 'rpm -q openssl 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.570" level="INFO">${output} = openssl-3.0.7-6.el9_2.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.551" endtime="20231004 13:43:23.571"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.572" endtime="20231004 13:43:23.572"/>
</kw>
<msg timestamp="20231004 13:43:23.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.572" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.571" endtime="20231004 13:43:23.572"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.573" endtime="20231004 13:43:23.573"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.550" endtime="20231004 13:43:23.573"/>
</iter>
<iter>
<var name="${item}">pam</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.574" level="INFO">${run_cmd} = rpm -q pam</msg>
<status status="PASS" starttime="20231004 13:43:23.573" endtime="20231004 13:43:23.574"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.574" level="INFO">rpm -q pam</msg>
<status status="PASS" starttime="20231004 13:43:23.574" endtime="20231004 13:43:23.574"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.577" level="INFO">Running command 'rpm -q pam 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.593" level="INFO">${output} = pam-1.5.1-14.el9.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.574" endtime="20231004 13:43:23.593"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.595" endtime="20231004 13:43:23.595"/>
</kw>
<msg timestamp="20231004 13:43:23.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.595" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.594" endtime="20231004 13:43:23.595"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.595" endtime="20231004 13:43:23.596"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.573" endtime="20231004 13:43:23.596"/>
</iter>
<iter>
<var name="${item}">python3-setuptools</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.596" level="INFO">${run_cmd} = rpm -q python3-setuptools</msg>
<status status="PASS" starttime="20231004 13:43:23.596" endtime="20231004 13:43:23.597"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.597" level="INFO">rpm -q python3-setuptools</msg>
<status status="PASS" starttime="20231004 13:43:23.597" endtime="20231004 13:43:23.597"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.599" level="INFO">Running command 'rpm -q python3-setuptools 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.617" level="INFO">${output} = python3-setuptools-53.0.0-12.el9.noarch</msg>
<status status="PASS" starttime="20231004 13:43:23.597" endtime="20231004 13:43:23.617"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.618" endtime="20231004 13:43:23.619"/>
</kw>
<msg timestamp="20231004 13:43:23.619" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.619" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.618" endtime="20231004 13:43:23.619"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.620" endtime="20231004 13:43:23.620"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.596" endtime="20231004 13:43:23.620"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.478" endtime="20231004 13:43:23.620"/>
</for>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${errors_list}</arg>
<arg>Item(S) Not Found : ${errors_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.621" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20231004 13:43:23.621" endtime="20231004 13:43:23.621"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.477" endtime="20231004 13:43:23.621"/>
</kw>
<doc>Check the installed packages using the "rpm -q" command against a list of expected
packages, add and remove packages form the list to modify the test case.
List included : ['ant', 'java-11-openjdk', 'python3', 'openssl', 'pam', 'python3-setuptools']</doc>
<tag>os</tag>
<tag>packages</tag>
<status status="PASS" starttime="20231004 13:43:23.472" endtime="20231004 13:43:23.622"/>
</test>
<test id="s1-s2-t2" name="Verify required package are and package versions" line="40">
<kw name="Create Dictionary" library="BuiltIn">
<var>${packages_dict}</var>
<arg>ant=1.9.3</arg>
<arg>java-11-openjdk=1.1</arg>
<arg>python3=3.7</arg>
<arg>openssl=0</arg>
<arg>pam=1.3.1</arg>
<arg>python3-setuptools=0</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231004 13:43:23.626" level="INFO">${packages_dict} = {'ant': '1.9.3', 'java-11-openjdk': '1.1', 'python3': '3.7', 'openssl': '0', 'pam': '1.3.1', 'python3-setuptools': '0'}</msg>
<status status="PASS" starttime="20231004 13:43:23.625" endtime="20231004 13:43:23.626"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${error_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.627" level="INFO">${error_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.627" endtime="20231004 13:43:23.627"/>
</kw>
<kw name="Step. Using the 'rpm -q' command valdate that the neccesary packages versions meet the minimum requirements" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.628" level="INFO">Using the 'rpm -q' command valdate that the neccesary packages versions meet the minimum requirements</msg>
<status status="PASS" starttime="20231004 13:43:23.628" endtime="20231004 13:43:23.628"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.628" endtime="20231004 13:43:23.629"/>
</kw>
<for flavor="IN">
<var>${package}</var>
<var>${required_version}</var>
<value>&amp;{packages_dict}</value>
<iter>
<var name="${package}">ant</var>
<var name="${required_version}">1.9.3</var>
<kw name="Log" library="BuiltIn">
<arg>Package = ${package} Version = ${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.630" level="INFO">Package = ant Version = 1.9.3</msg>
<status status="PASS" starttime="20231004 13:43:23.629" endtime="20231004 13:43:23.630"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${package_rpm}</var>
<arg>rpm -q ${package}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.634" level="INFO">Running command 'rpm -q ant 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.650" level="INFO">${package_rpm} = ant-1.10.9-7.el9.noarch</msg>
<status status="PASS" starttime="20231004 13:43:23.630" endtime="20231004 13:43:23.650"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${package_rpm}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.651" level="INFO">ant-1.10.9-7.el9.noarch</msg>
<status status="PASS" starttime="20231004 13:43:23.651" endtime="20231004 13:43:23.652"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${installed_version}</var>
<arg>${package_rpm}</arg>
<arg>${package}-(.*)-.*</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.652" level="INFO">${installed_version} = ['1.10.9']</msg>
<status status="PASS" starttime="20231004 13:43:23.652" endtime="20231004 13:43:23.653"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Installed Version : ${installed_version[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.654" level="INFO">Installed Version : 1.10.9</msg>
<status status="PASS" starttime="20231004 13:43:23.653" endtime="20231004 13:43:23.654"/>
</kw>
<kw name="Compare Package Versions" library="keywords">
<var>${status}</var>
<arg>${installed_version[0]}</arg>
<arg>&gt;</arg>
<arg>${required_version}</arg>
<doc>Support all evaluators except single "=""</doc>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.656" level="INFO">@{installed_segments} = [ 1 | 10 | 9 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.655" endtime="20231004 13:43:23.656"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.656" level="INFO">@{required_segments} = [ 1 | 9 | 3 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.656" endtime="20231004 13:43:23.656"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${installed_length}</var>
<arg>${installed_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.656" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.657" level="INFO">${installed_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.656" endtime="20231004 13:43:23.657"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${required_length}</var>
<arg>${required_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.657" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.657" level="INFO">${required_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.657" endtime="20231004 13:43:23.657"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${installed_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.657" level="INFO">${max_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.657" endtime="20231004 13:43:23.657"/>
</kw>
<if>
<branch type="IF" condition="${required_length} &gt; ${installed_length}">
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${required_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.658" endtime="20231004 13:43:23.658"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.658" endtime="20231004 13:43:23.658"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.658" endtime="20231004 13:43:23.658"/>
</if>
<kw name="Pad Version" library="keywords">
<var>${installed_version}</var>
<arg>${installed_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.659" level="INFO">${segments} = ['1', '10', '9']</msg>
<status status="PASS" starttime="20231004 13:43:23.659" endtime="20231004 13:43:23.659"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.659" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.660" level="INFO">${segments_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.659" endtime="20231004 13:43:23.660"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.661" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.661" endtime="20231004 13:43:23.661"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.661" endtime="20231004 13:43:23.662"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.661" endtime="20231004 13:43:23.662"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.661" endtime="20231004 13:43:23.662"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.662" level="INFO">${padded_version} = 1.10.9</msg>
<status status="PASS" starttime="20231004 13:43:23.662" endtime="20231004 13:43:23.662"/>
</kw>
<msg timestamp="20231004 13:43:23.662" level="INFO">${installed_version} = 1.10.9</msg>
<status status="PASS" starttime="20231004 13:43:23.658" endtime="20231004 13:43:23.662"/>
</kw>
<kw name="Pad Version" library="keywords">
<var>${required_version}</var>
<arg>${required_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.663" level="INFO">${segments} = ['1', '9', '3']</msg>
<status status="PASS" starttime="20231004 13:43:23.663" endtime="20231004 13:43:23.663"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.664" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.664" level="INFO">${segments_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.663" endtime="20231004 13:43:23.664"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.664" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.664" endtime="20231004 13:43:23.664"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.665" endtime="20231004 13:43:23.665"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.665" endtime="20231004 13:43:23.665"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.664" endtime="20231004 13:43:23.665"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.665" level="INFO">${padded_version} = 1.9.3</msg>
<status status="PASS" starttime="20231004 13:43:23.665" endtime="20231004 13:43:23.665"/>
</kw>
<msg timestamp="20231004 13:43:23.666" level="INFO">${required_version} = 1.9.3</msg>
<status status="PASS" starttime="20231004 13:43:23.662" endtime="20231004 13:43:23.666"/>
</kw>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.666" level="INFO">@{installed_segments} = [ 1 | 10 | 9 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.666" endtime="20231004 13:43:23.666"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.667" level="INFO">@{required_segments} = [ 1 | 9 | 3 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.666" endtime="20231004 13:43:23.667"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${iterator}</var>
<arg>0</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.667" level="INFO">${iterator} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.667" endtime="20231004 13:43:23.667"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${max_length}</value>
<iter>
<var name="${i}">0</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.670" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.667" endtime="20231004 13:43:23.670"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.670" endtime="20231004 13:43:23.671"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.671" endtime="20231004 13:43:23.673"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.671" endtime="20231004 13:43:23.673"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.673" endtime="20231004 13:43:23.673"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.670" endtime="20231004 13:43:23.673"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.670" endtime="20231004 13:43:23.673"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.667" endtime="20231004 13:43:23.673"/>
</iter>
<iter>
<var name="${i}">1</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.676" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.673" endtime="20231004 13:43:23.676"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.676" endtime="20231004 13:43:23.677"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<msg timestamp="20231004 13:43:23.679" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20231004 13:43:23.678" endtime="20231004 13:43:23.679"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.677" endtime="20231004 13:43:23.679"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.680" endtime="20231004 13:43:23.680"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.676" endtime="20231004 13:43:23.680"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.676" endtime="20231004 13:43:23.680"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.673" endtime="20231004 13:43:23.680"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.667" endtime="20231004 13:43:23.680"/>
</for>
<return>
<value>${result}</value>
<status status="PASS" starttime="20231004 13:43:23.680" endtime="20231004 13:43:23.680"/>
</return>
<msg timestamp="20231004 13:43:23.680" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.654" endtime="20231004 13:43:23.680"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Package : ${package}, Version:${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.681" level="INFO">Package : ant, Version:1.9.3</msg>
<status status="PASS" starttime="20231004 13:43:23.680" endtime="20231004 13:43:23.681"/>
</kw>
<if>
<branch type="IF" condition="${status} != True">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${package}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.681" endtime="20231004 13:43:23.681"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.681" endtime="20231004 13:43:23.681"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.681" endtime="20231004 13:43:23.681"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.629" endtime="20231004 13:43:23.681"/>
</iter>
<iter>
<var name="${package}">java-11-openjdk</var>
<var name="${required_version}">1.1</var>
<kw name="Log" library="BuiltIn">
<arg>Package = ${package} Version = ${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.682" level="INFO">Package = java-11-openjdk Version = 1.1</msg>
<status status="PASS" starttime="20231004 13:43:23.682" endtime="20231004 13:43:23.682"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${package_rpm}</var>
<arg>rpm -q ${package}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.685" level="INFO">Running command 'rpm -q java-11-openjdk 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.701" level="INFO">${package_rpm} = java-11-openjdk-11.0.18.0.10-2.el9_1.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.682" endtime="20231004 13:43:23.701"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${package_rpm}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.703" level="INFO">java-11-openjdk-11.0.18.0.10-2.el9_1.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.702" endtime="20231004 13:43:23.703"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${installed_version}</var>
<arg>${package_rpm}</arg>
<arg>${package}-(.*)-.*</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.704" level="INFO">${installed_version} = ['11.0.18.0.10']</msg>
<status status="PASS" starttime="20231004 13:43:23.703" endtime="20231004 13:43:23.704"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Installed Version : ${installed_version[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.705" level="INFO">Installed Version : 11.0.18.0.10</msg>
<status status="PASS" starttime="20231004 13:43:23.704" endtime="20231004 13:43:23.705"/>
</kw>
<kw name="Compare Package Versions" library="keywords">
<var>${status}</var>
<arg>${installed_version[0]}</arg>
<arg>&gt;</arg>
<arg>${required_version}</arg>
<doc>Support all evaluators except single "=""</doc>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.707" level="INFO">@{installed_segments} = [ 11 | 0 | 18 | 0 | 10 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.706" endtime="20231004 13:43:23.707"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.707" level="INFO">@{required_segments} = [ 1 | 1 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.707" endtime="20231004 13:43:23.707"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${installed_length}</var>
<arg>${installed_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.708" level="INFO">Length is 5</msg>
<msg timestamp="20231004 13:43:23.708" level="INFO">${installed_length} = 5</msg>
<status status="PASS" starttime="20231004 13:43:23.707" endtime="20231004 13:43:23.708"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${required_length}</var>
<arg>${required_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.708" level="INFO">Length is 2</msg>
<msg timestamp="20231004 13:43:23.708" level="INFO">${required_length} = 2</msg>
<status status="PASS" starttime="20231004 13:43:23.708" endtime="20231004 13:43:23.708"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${installed_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.709" level="INFO">${max_length} = 5</msg>
<status status="PASS" starttime="20231004 13:43:23.708" endtime="20231004 13:43:23.709"/>
</kw>
<if>
<branch type="IF" condition="${required_length} &gt; ${installed_length}">
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${required_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.709" endtime="20231004 13:43:23.709"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.709" endtime="20231004 13:43:23.709"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.709" endtime="20231004 13:43:23.709"/>
</if>
<kw name="Pad Version" library="keywords">
<var>${installed_version}</var>
<arg>${installed_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.711" level="INFO">${segments} = ['11', '0', '18', '0', '10']</msg>
<status status="PASS" starttime="20231004 13:43:23.710" endtime="20231004 13:43:23.711"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.711" level="INFO">Length is 5</msg>
<msg timestamp="20231004 13:43:23.711" level="INFO">${segments_length} = 5</msg>
<status status="PASS" starttime="20231004 13:43:23.711" endtime="20231004 13:43:23.712"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.712" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.712" endtime="20231004 13:43:23.712"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.713" endtime="20231004 13:43:23.713"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.713" endtime="20231004 13:43:23.713"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.713" endtime="20231004 13:43:23.713"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.714" level="INFO">${padded_version} = 11.0.18.0.10</msg>
<status status="PASS" starttime="20231004 13:43:23.713" endtime="20231004 13:43:23.714"/>
</kw>
<msg timestamp="20231004 13:43:23.714" level="INFO">${installed_version} = 11.0.18.0.10</msg>
<status status="PASS" starttime="20231004 13:43:23.710" endtime="20231004 13:43:23.714"/>
</kw>
<kw name="Pad Version" library="keywords">
<var>${required_version}</var>
<arg>${required_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.715" level="INFO">${segments} = ['1', '1']</msg>
<status status="PASS" starttime="20231004 13:43:23.714" endtime="20231004 13:43:23.715"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.715" level="INFO">Length is 2</msg>
<msg timestamp="20231004 13:43:23.715" level="INFO">${segments_length} = 2</msg>
<status status="PASS" starttime="20231004 13:43:23.715" endtime="20231004 13:43:23.715"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.716" level="INFO">${pad_count} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.715" endtime="20231004 13:43:23.716"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}">0</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.716" endtime="20231004 13:43:23.717"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.716" endtime="20231004 13:43:23.717"/>
</iter>
<iter>
<var name="${i}">1</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.717" endtime="20231004 13:43:23.717"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.717" endtime="20231004 13:43:23.717"/>
</iter>
<iter>
<var name="${i}">2</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.717" endtime="20231004 13:43:23.718"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.717" endtime="20231004 13:43:23.718"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.716" endtime="20231004 13:43:23.718"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.718" level="INFO">${padded_version} = 1.1.0.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.718" endtime="20231004 13:43:23.718"/>
</kw>
<msg timestamp="20231004 13:43:23.718" level="INFO">${required_version} = 1.1.0.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.714" endtime="20231004 13:43:23.718"/>
</kw>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.719" level="INFO">@{installed_segments} = [ 11 | 0 | 18 | 0 | 10 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.718" endtime="20231004 13:43:23.719"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.719" level="INFO">@{required_segments} = [ 1 | 1 | 0 | 0 | 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.719" endtime="20231004 13:43:23.719"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${iterator}</var>
<arg>0</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.720" level="INFO">${iterator} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.719" endtime="20231004 13:43:23.720"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${max_length}</value>
<iter>
<var name="${i}">0</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.723" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.720" endtime="20231004 13:43:23.723"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.723" endtime="20231004 13:43:23.724"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<msg timestamp="20231004 13:43:23.726" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20231004 13:43:23.724" endtime="20231004 13:43:23.726"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.724" endtime="20231004 13:43:23.726"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.726" endtime="20231004 13:43:23.726"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.723" endtime="20231004 13:43:23.726"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.723" endtime="20231004 13:43:23.726"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.720" endtime="20231004 13:43:23.726"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.720" endtime="20231004 13:43:23.726"/>
</for>
<return>
<value>${result}</value>
<status status="PASS" starttime="20231004 13:43:23.726" endtime="20231004 13:43:23.727"/>
</return>
<msg timestamp="20231004 13:43:23.727" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.705" endtime="20231004 13:43:23.727"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Package : ${package}, Version:${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.728" level="INFO">Package : java-11-openjdk, Version:1.1</msg>
<status status="PASS" starttime="20231004 13:43:23.727" endtime="20231004 13:43:23.728"/>
</kw>
<if>
<branch type="IF" condition="${status} != True">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${package}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.728" endtime="20231004 13:43:23.728"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.728" endtime="20231004 13:43:23.728"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.728" endtime="20231004 13:43:23.728"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.681" endtime="20231004 13:43:23.728"/>
</iter>
<iter>
<var name="${package}">python3</var>
<var name="${required_version}">3.7</var>
<kw name="Log" library="BuiltIn">
<arg>Package = ${package} Version = ${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.729" level="INFO">Package = python3 Version = 3.7</msg>
<status status="PASS" starttime="20231004 13:43:23.728" endtime="20231004 13:43:23.729"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${package_rpm}</var>
<arg>rpm -q ${package}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.732" level="INFO">Running command 'rpm -q python3 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.747" level="INFO">${package_rpm} = python3-3.9.16-1.el9.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.729" endtime="20231004 13:43:23.747"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${package_rpm}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.748" level="INFO">python3-3.9.16-1.el9.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.747" endtime="20231004 13:43:23.748"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${installed_version}</var>
<arg>${package_rpm}</arg>
<arg>${package}-(.*)-.*</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.749" level="INFO">${installed_version} = ['3.9.16']</msg>
<status status="PASS" starttime="20231004 13:43:23.748" endtime="20231004 13:43:23.749"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Installed Version : ${installed_version[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.750" level="INFO">Installed Version : 3.9.16</msg>
<status status="PASS" starttime="20231004 13:43:23.749" endtime="20231004 13:43:23.750"/>
</kw>
<kw name="Compare Package Versions" library="keywords">
<var>${status}</var>
<arg>${installed_version[0]}</arg>
<arg>&gt;</arg>
<arg>${required_version}</arg>
<doc>Support all evaluators except single "=""</doc>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.752" level="INFO">@{installed_segments} = [ 3 | 9 | 16 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.752" endtime="20231004 13:43:23.752"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.753" level="INFO">@{required_segments} = [ 3 | 7 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.752" endtime="20231004 13:43:23.753"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${installed_length}</var>
<arg>${installed_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.753" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.753" level="INFO">${installed_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.753" endtime="20231004 13:43:23.753"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${required_length}</var>
<arg>${required_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.754" level="INFO">Length is 2</msg>
<msg timestamp="20231004 13:43:23.754" level="INFO">${required_length} = 2</msg>
<status status="PASS" starttime="20231004 13:43:23.753" endtime="20231004 13:43:23.754"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${installed_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.755" level="INFO">${max_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.754" endtime="20231004 13:43:23.755"/>
</kw>
<if>
<branch type="IF" condition="${required_length} &gt; ${installed_length}">
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${required_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.755" endtime="20231004 13:43:23.755"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.755" endtime="20231004 13:43:23.755"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.755" endtime="20231004 13:43:23.755"/>
</if>
<kw name="Pad Version" library="keywords">
<var>${installed_version}</var>
<arg>${installed_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.756" level="INFO">${segments} = ['3', '9', '16']</msg>
<status status="PASS" starttime="20231004 13:43:23.756" endtime="20231004 13:43:23.756"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.757" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.757" level="INFO">${segments_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.756" endtime="20231004 13:43:23.757"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.757" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.757" endtime="20231004 13:43:23.757"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.758" endtime="20231004 13:43:23.758"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.758" endtime="20231004 13:43:23.758"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.757" endtime="20231004 13:43:23.758"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.758" level="INFO">${padded_version} = 3.9.16</msg>
<status status="PASS" starttime="20231004 13:43:23.758" endtime="20231004 13:43:23.758"/>
</kw>
<msg timestamp="20231004 13:43:23.758" level="INFO">${installed_version} = 3.9.16</msg>
<status status="PASS" starttime="20231004 13:43:23.755" endtime="20231004 13:43:23.759"/>
</kw>
<kw name="Pad Version" library="keywords">
<var>${required_version}</var>
<arg>${required_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.760" level="INFO">${segments} = ['3', '7']</msg>
<status status="PASS" starttime="20231004 13:43:23.760" endtime="20231004 13:43:23.760"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.760" level="INFO">Length is 2</msg>
<msg timestamp="20231004 13:43:23.761" level="INFO">${segments_length} = 2</msg>
<status status="PASS" starttime="20231004 13:43:23.760" endtime="20231004 13:43:23.761"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.761" level="INFO">${pad_count} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.761" endtime="20231004 13:43:23.761"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}">0</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.762" endtime="20231004 13:43:23.762"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.761" endtime="20231004 13:43:23.762"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.761" endtime="20231004 13:43:23.762"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.762" level="INFO">${padded_version} = 3.7.0</msg>
<status status="PASS" starttime="20231004 13:43:23.762" endtime="20231004 13:43:23.762"/>
</kw>
<msg timestamp="20231004 13:43:23.763" level="INFO">${required_version} = 3.7.0</msg>
<status status="PASS" starttime="20231004 13:43:23.759" endtime="20231004 13:43:23.763"/>
</kw>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.763" level="INFO">@{installed_segments} = [ 3 | 9 | 16 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.763" endtime="20231004 13:43:23.763"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.764" level="INFO">@{required_segments} = [ 3 | 7 | 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.763" endtime="20231004 13:43:23.764"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${iterator}</var>
<arg>0</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.764" level="INFO">${iterator} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.764" endtime="20231004 13:43:23.764"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${max_length}</value>
<iter>
<var name="${i}">0</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.767" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.764" endtime="20231004 13:43:23.767"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.768" endtime="20231004 13:43:23.768"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.769" endtime="20231004 13:43:23.770"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.768" endtime="20231004 13:43:23.770"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.770" endtime="20231004 13:43:23.771"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.767" endtime="20231004 13:43:23.771"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.767" endtime="20231004 13:43:23.771"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.764" endtime="20231004 13:43:23.771"/>
</iter>
<iter>
<var name="${i}">1</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.773" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.771" endtime="20231004 13:43:23.773"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.774" endtime="20231004 13:43:23.774"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<msg timestamp="20231004 13:43:23.776" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20231004 13:43:23.775" endtime="20231004 13:43:23.776"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.774" endtime="20231004 13:43:23.776"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.776" endtime="20231004 13:43:23.777"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.773" endtime="20231004 13:43:23.777"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.773" endtime="20231004 13:43:23.777"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.771" endtime="20231004 13:43:23.777"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.764" endtime="20231004 13:43:23.777"/>
</for>
<return>
<value>${result}</value>
<status status="PASS" starttime="20231004 13:43:23.777" endtime="20231004 13:43:23.777"/>
</return>
<msg timestamp="20231004 13:43:23.777" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.750" endtime="20231004 13:43:23.778"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Package : ${package}, Version:${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.778" level="INFO">Package : python3, Version:3.7</msg>
<status status="PASS" starttime="20231004 13:43:23.778" endtime="20231004 13:43:23.778"/>
</kw>
<if>
<branch type="IF" condition="${status} != True">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${package}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.778" endtime="20231004 13:43:23.778"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.778" endtime="20231004 13:43:23.778"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.778" endtime="20231004 13:43:23.778"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.728" endtime="20231004 13:43:23.779"/>
</iter>
<iter>
<var name="${package}">openssl</var>
<var name="${required_version}">0</var>
<kw name="Log" library="BuiltIn">
<arg>Package = ${package} Version = ${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.779" level="INFO">Package = openssl Version = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.779" endtime="20231004 13:43:23.779"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${package_rpm}</var>
<arg>rpm -q ${package}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.782" level="INFO">Running command 'rpm -q openssl 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.799" level="INFO">${package_rpm} = openssl-3.0.7-6.el9_2.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.779" endtime="20231004 13:43:23.799"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${package_rpm}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.800" level="INFO">openssl-3.0.7-6.el9_2.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.799" endtime="20231004 13:43:23.800"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${installed_version}</var>
<arg>${package_rpm}</arg>
<arg>${package}-(.*)-.*</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.801" level="INFO">${installed_version} = ['3.0.7']</msg>
<status status="PASS" starttime="20231004 13:43:23.800" endtime="20231004 13:43:23.801"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Installed Version : ${installed_version[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.802" level="INFO">Installed Version : 3.0.7</msg>
<status status="PASS" starttime="20231004 13:43:23.801" endtime="20231004 13:43:23.802"/>
</kw>
<kw name="Compare Package Versions" library="keywords">
<var>${status}</var>
<arg>${installed_version[0]}</arg>
<arg>&gt;</arg>
<arg>${required_version}</arg>
<doc>Support all evaluators except single "=""</doc>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.805" level="INFO">@{installed_segments} = [ 3 | 0 | 7 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.804" endtime="20231004 13:43:23.805"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.805" level="INFO">@{required_segments} = [ 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.805" endtime="20231004 13:43:23.805"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${installed_length}</var>
<arg>${installed_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.806" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.806" level="INFO">${installed_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.805" endtime="20231004 13:43:23.806"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${required_length}</var>
<arg>${required_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.806" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.806" level="INFO">${required_length} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.806" endtime="20231004 13:43:23.806"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${installed_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.807" level="INFO">${max_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.806" endtime="20231004 13:43:23.807"/>
</kw>
<if>
<branch type="IF" condition="${required_length} &gt; ${installed_length}">
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${required_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.807" endtime="20231004 13:43:23.807"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.807" endtime="20231004 13:43:23.807"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.807" endtime="20231004 13:43:23.807"/>
</if>
<kw name="Pad Version" library="keywords">
<var>${installed_version}</var>
<arg>${installed_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.808" level="INFO">${segments} = ['3', '0', '7']</msg>
<status status="PASS" starttime="20231004 13:43:23.808" endtime="20231004 13:43:23.808"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.808" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.809" level="INFO">${segments_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.808" endtime="20231004 13:43:23.809"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.809" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.809" endtime="20231004 13:43:23.809"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.810" endtime="20231004 13:43:23.810"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.809" endtime="20231004 13:43:23.810"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.809" endtime="20231004 13:43:23.810"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.810" level="INFO">${padded_version} = 3.0.7</msg>
<status status="PASS" starttime="20231004 13:43:23.810" endtime="20231004 13:43:23.810"/>
</kw>
<msg timestamp="20231004 13:43:23.810" level="INFO">${installed_version} = 3.0.7</msg>
<status status="PASS" starttime="20231004 13:43:23.807" endtime="20231004 13:43:23.810"/>
</kw>
<kw name="Pad Version" library="keywords">
<var>${required_version}</var>
<arg>${required_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.812" level="INFO">${segments} = ['0']</msg>
<status status="PASS" starttime="20231004 13:43:23.812" endtime="20231004 13:43:23.812"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.812" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.812" level="INFO">${segments_length} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.812" endtime="20231004 13:43:23.812"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.813" level="INFO">${pad_count} = 2</msg>
<status status="PASS" starttime="20231004 13:43:23.812" endtime="20231004 13:43:23.813"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}">0</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.813" endtime="20231004 13:43:23.814"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.813" endtime="20231004 13:43:23.814"/>
</iter>
<iter>
<var name="${i}">1</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.814" endtime="20231004 13:43:23.814"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.814" endtime="20231004 13:43:23.814"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.813" endtime="20231004 13:43:23.814"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.815" level="INFO">${padded_version} = 0.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.814" endtime="20231004 13:43:23.815"/>
</kw>
<msg timestamp="20231004 13:43:23.815" level="INFO">${required_version} = 0.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.811" endtime="20231004 13:43:23.815"/>
</kw>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.815" level="INFO">@{installed_segments} = [ 3 | 0 | 7 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.815" endtime="20231004 13:43:23.815"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.816" level="INFO">@{required_segments} = [ 0 | 0 | 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.815" endtime="20231004 13:43:23.816"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${iterator}</var>
<arg>0</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.816" level="INFO">${iterator} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.816" endtime="20231004 13:43:23.816"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${max_length}</value>
<iter>
<var name="${i}">0</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.819" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.817" endtime="20231004 13:43:23.819"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.820" endtime="20231004 13:43:23.820"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<msg timestamp="20231004 13:43:23.822" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20231004 13:43:23.821" endtime="20231004 13:43:23.822"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.820" endtime="20231004 13:43:23.822"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.823" endtime="20231004 13:43:23.823"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.819" endtime="20231004 13:43:23.823"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.819" endtime="20231004 13:43:23.823"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.816" endtime="20231004 13:43:23.823"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.816" endtime="20231004 13:43:23.823"/>
</for>
<return>
<value>${result}</value>
<status status="PASS" starttime="20231004 13:43:23.823" endtime="20231004 13:43:23.823"/>
</return>
<msg timestamp="20231004 13:43:23.823" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.803" endtime="20231004 13:43:23.823"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Package : ${package}, Version:${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.824" level="INFO">Package : openssl, Version:0</msg>
<status status="PASS" starttime="20231004 13:43:23.823" endtime="20231004 13:43:23.824"/>
</kw>
<if>
<branch type="IF" condition="${status} != True">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${package}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.824" endtime="20231004 13:43:23.824"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.824" endtime="20231004 13:43:23.824"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.824" endtime="20231004 13:43:23.824"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.779" endtime="20231004 13:43:23.824"/>
</iter>
<iter>
<var name="${package}">pam</var>
<var name="${required_version}">1.3.1</var>
<kw name="Log" library="BuiltIn">
<arg>Package = ${package} Version = ${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.825" level="INFO">Package = pam Version = 1.3.1</msg>
<status status="PASS" starttime="20231004 13:43:23.824" endtime="20231004 13:43:23.825"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${package_rpm}</var>
<arg>rpm -q ${package}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.828" level="INFO">Running command 'rpm -q pam 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.845" level="INFO">${package_rpm} = pam-1.5.1-14.el9.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.825" endtime="20231004 13:43:23.845"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${package_rpm}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.846" level="INFO">pam-1.5.1-14.el9.x86_64</msg>
<status status="PASS" starttime="20231004 13:43:23.845" endtime="20231004 13:43:23.846"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${installed_version}</var>
<arg>${package_rpm}</arg>
<arg>${package}-(.*)-.*</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.847" level="INFO">${installed_version} = ['1.5.1']</msg>
<status status="PASS" starttime="20231004 13:43:23.847" endtime="20231004 13:43:23.847"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Installed Version : ${installed_version[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.849" level="INFO">Installed Version : 1.5.1</msg>
<status status="PASS" starttime="20231004 13:43:23.848" endtime="20231004 13:43:23.849"/>
</kw>
<kw name="Compare Package Versions" library="keywords">
<var>${status}</var>
<arg>${installed_version[0]}</arg>
<arg>&gt;</arg>
<arg>${required_version}</arg>
<doc>Support all evaluators except single "=""</doc>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.851" level="INFO">@{installed_segments} = [ 1 | 5 | 1 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.851" endtime="20231004 13:43:23.851"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.852" level="INFO">@{required_segments} = [ 1 | 3 | 1 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.851" endtime="20231004 13:43:23.852"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${installed_length}</var>
<arg>${installed_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.852" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.852" level="INFO">${installed_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.852" endtime="20231004 13:43:23.852"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${required_length}</var>
<arg>${required_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.853" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.853" level="INFO">${required_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.853" endtime="20231004 13:43:23.853"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${installed_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.853" level="INFO">${max_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.853" endtime="20231004 13:43:23.853"/>
</kw>
<if>
<branch type="IF" condition="${required_length} &gt; ${installed_length}">
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${required_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.854" endtime="20231004 13:43:23.854"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.854" endtime="20231004 13:43:23.854"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.854" endtime="20231004 13:43:23.854"/>
</if>
<kw name="Pad Version" library="keywords">
<var>${installed_version}</var>
<arg>${installed_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.855" level="INFO">${segments} = ['1', '5', '1']</msg>
<status status="PASS" starttime="20231004 13:43:23.855" endtime="20231004 13:43:23.855"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.855" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.855" level="INFO">${segments_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.855" endtime="20231004 13:43:23.855"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.856" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.856" endtime="20231004 13:43:23.856"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.857" endtime="20231004 13:43:23.857"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.856" endtime="20231004 13:43:23.857"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.856" endtime="20231004 13:43:23.857"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.857" level="INFO">${padded_version} = 1.5.1</msg>
<status status="PASS" starttime="20231004 13:43:23.857" endtime="20231004 13:43:23.857"/>
</kw>
<msg timestamp="20231004 13:43:23.857" level="INFO">${installed_version} = 1.5.1</msg>
<status status="PASS" starttime="20231004 13:43:23.854" endtime="20231004 13:43:23.857"/>
</kw>
<kw name="Pad Version" library="keywords">
<var>${required_version}</var>
<arg>${required_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.858" level="INFO">${segments} = ['1', '3', '1']</msg>
<status status="PASS" starttime="20231004 13:43:23.858" endtime="20231004 13:43:23.858"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.859" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.859" level="INFO">${segments_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.858" endtime="20231004 13:43:23.859"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.859" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.859" endtime="20231004 13:43:23.859"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.860" endtime="20231004 13:43:23.860"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.860" endtime="20231004 13:43:23.860"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.859" endtime="20231004 13:43:23.860"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.860" level="INFO">${padded_version} = 1.3.1</msg>
<status status="PASS" starttime="20231004 13:43:23.860" endtime="20231004 13:43:23.861"/>
</kw>
<msg timestamp="20231004 13:43:23.861" level="INFO">${required_version} = 1.3.1</msg>
<status status="PASS" starttime="20231004 13:43:23.857" endtime="20231004 13:43:23.861"/>
</kw>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.861" level="INFO">@{installed_segments} = [ 1 | 5 | 1 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.861" endtime="20231004 13:43:23.861"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.862" level="INFO">@{required_segments} = [ 1 | 3 | 1 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.861" endtime="20231004 13:43:23.862"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${iterator}</var>
<arg>0</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.862" level="INFO">${iterator} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.862" endtime="20231004 13:43:23.862"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${max_length}</value>
<iter>
<var name="${i}">0</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.865" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.863" endtime="20231004 13:43:23.865"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.866" endtime="20231004 13:43:23.866"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.867" endtime="20231004 13:43:23.868"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.866" endtime="20231004 13:43:23.868"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.868" endtime="20231004 13:43:23.869"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.865" endtime="20231004 13:43:23.869"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.865" endtime="20231004 13:43:23.869"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.863" endtime="20231004 13:43:23.869"/>
</iter>
<iter>
<var name="${i}">1</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.872" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.869" endtime="20231004 13:43:23.872"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.872" endtime="20231004 13:43:23.872"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<msg timestamp="20231004 13:43:23.874" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20231004 13:43:23.873" endtime="20231004 13:43:23.875"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.872" endtime="20231004 13:43:23.875"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.875" endtime="20231004 13:43:23.875"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.872" endtime="20231004 13:43:23.875"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.872" endtime="20231004 13:43:23.875"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.869" endtime="20231004 13:43:23.875"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.862" endtime="20231004 13:43:23.875"/>
</for>
<return>
<value>${result}</value>
<status status="PASS" starttime="20231004 13:43:23.875" endtime="20231004 13:43:23.875"/>
</return>
<msg timestamp="20231004 13:43:23.875" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.849" endtime="20231004 13:43:23.875"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Package : ${package}, Version:${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.876" level="INFO">Package : pam, Version:1.3.1</msg>
<status status="PASS" starttime="20231004 13:43:23.876" endtime="20231004 13:43:23.876"/>
</kw>
<if>
<branch type="IF" condition="${status} != True">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${package}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.877" endtime="20231004 13:43:23.877"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.876" endtime="20231004 13:43:23.877"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.876" endtime="20231004 13:43:23.877"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.824" endtime="20231004 13:43:23.877"/>
</iter>
<iter>
<var name="${package}">python3-setuptools</var>
<var name="${required_version}">0</var>
<kw name="Log" library="BuiltIn">
<arg>Package = ${package} Version = ${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.877" level="INFO">Package = python3-setuptools Version = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.877" endtime="20231004 13:43:23.877"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${package_rpm}</var>
<arg>rpm -q ${package}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.880" level="INFO">Running command 'rpm -q python3-setuptools 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.898" level="INFO">${package_rpm} = python3-setuptools-53.0.0-12.el9.noarch</msg>
<status status="PASS" starttime="20231004 13:43:23.878" endtime="20231004 13:43:23.898"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${package_rpm}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.899" level="INFO">python3-setuptools-53.0.0-12.el9.noarch</msg>
<status status="PASS" starttime="20231004 13:43:23.899" endtime="20231004 13:43:23.900"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${installed_version}</var>
<arg>${package_rpm}</arg>
<arg>${package}-(.*)-.*</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:23.902" level="INFO">${installed_version} = ['53.0.0']</msg>
<status status="PASS" starttime="20231004 13:43:23.900" endtime="20231004 13:43:23.902"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Installed Version : ${installed_version[0]}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.903" level="INFO">Installed Version : 53.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.902" endtime="20231004 13:43:23.903"/>
</kw>
<kw name="Compare Package Versions" library="keywords">
<var>${status}</var>
<arg>${installed_version[0]}</arg>
<arg>&gt;</arg>
<arg>${required_version}</arg>
<doc>Support all evaluators except single "=""</doc>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.904" level="INFO">@{installed_segments} = [ 53 | 0 | 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.904" endtime="20231004 13:43:23.905"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.905" level="INFO">@{required_segments} = [ 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.905" endtime="20231004 13:43:23.905"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${installed_length}</var>
<arg>${installed_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.905" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.905" level="INFO">${installed_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.905" endtime="20231004 13:43:23.906"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${required_length}</var>
<arg>${required_segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.906" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.906" level="INFO">${required_length} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.906" endtime="20231004 13:43:23.906"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${installed_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.906" level="INFO">${max_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.906" endtime="20231004 13:43:23.906"/>
</kw>
<if>
<branch type="IF" condition="${required_length} &gt; ${installed_length}">
<kw name="Set Variable" library="BuiltIn">
<var>${max_length}</var>
<arg>${required_length}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.907" endtime="20231004 13:43:23.907"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.907" endtime="20231004 13:43:23.907"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.907" endtime="20231004 13:43:23.907"/>
</if>
<kw name="Pad Version" library="keywords">
<var>${installed_version}</var>
<arg>${installed_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.908" level="INFO">${segments} = ['53', '0', '0']</msg>
<status status="PASS" starttime="20231004 13:43:23.908" endtime="20231004 13:43:23.908"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.908" level="INFO">Length is 3</msg>
<msg timestamp="20231004 13:43:23.908" level="INFO">${segments_length} = 3</msg>
<status status="PASS" starttime="20231004 13:43:23.908" endtime="20231004 13:43:23.908"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.909" level="INFO">${pad_count} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.909" endtime="20231004 13:43:23.909"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}"/>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.909" endtime="20231004 13:43:23.910"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.909" endtime="20231004 13:43:23.910"/>
</iter>
<status status="NOT RUN" starttime="20231004 13:43:23.909" endtime="20231004 13:43:23.910"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.910" level="INFO">${padded_version} = 53.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.910" endtime="20231004 13:43:23.910"/>
</kw>
<msg timestamp="20231004 13:43:23.910" level="INFO">${installed_version} = 53.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.907" endtime="20231004 13:43:23.910"/>
</kw>
<kw name="Pad Version" library="keywords">
<var>${required_version}</var>
<arg>${required_version}</arg>
<arg>${max_length}</arg>
<kw name="Split String" library="String">
<var>${segments}</var>
<arg>${version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.911" level="INFO">${segments} = ['0']</msg>
<status status="PASS" starttime="20231004 13:43:23.911" endtime="20231004 13:43:23.911"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${segments_length}</var>
<arg>${segments}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231004 13:43:23.912" level="INFO">Length is 1</msg>
<msg timestamp="20231004 13:43:23.912" level="INFO">${segments_length} = 1</msg>
<status status="PASS" starttime="20231004 13:43:23.911" endtime="20231004 13:43:23.912"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${pad_count}</var>
<arg>${length} - ${segments_length}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.912" level="INFO">${pad_count} = 2</msg>
<status status="PASS" starttime="20231004 13:43:23.912" endtime="20231004 13:43:23.912"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${pad_count}</value>
<iter>
<var name="${i}">0</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.913" endtime="20231004 13:43:23.913"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.913" endtime="20231004 13:43:23.913"/>
</iter>
<iter>
<var name="${i}">1</var>
<kw name="Append To List" library="Collections">
<arg>${segments}</arg>
<arg>0</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20231004 13:43:23.913" endtime="20231004 13:43:23.913"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.913" endtime="20231004 13:43:23.914"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.912" endtime="20231004 13:43:23.914"/>
</for>
<kw name="Catenate" library="BuiltIn">
<var>${padded_version}</var>
<arg>SEPARATOR=.</arg>
<arg>@{segments}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:23.914" level="INFO">${padded_version} = 0.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.914" endtime="20231004 13:43:23.914"/>
</kw>
<msg timestamp="20231004 13:43:23.915" level="INFO">${required_version} = 0.0.0</msg>
<status status="PASS" starttime="20231004 13:43:23.910" endtime="20231004 13:43:23.915"/>
</kw>
<kw name="Split String" library="String">
<var>@{installed_segments}</var>
<arg>${installed_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.915" level="INFO">@{installed_segments} = [ 53 | 0 | 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.915" endtime="20231004 13:43:23.915"/>
</kw>
<kw name="Split String" library="String">
<var>@{required_segments}</var>
<arg>${required_version}</arg>
<arg>.</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231004 13:43:23.916" level="INFO">@{required_segments} = [ 0 | 0 | 0 ]</msg>
<status status="PASS" starttime="20231004 13:43:23.915" endtime="20231004 13:43:23.916"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${iterator}</var>
<arg>0</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.916" level="INFO">${iterator} = 0</msg>
<status status="PASS" starttime="20231004 13:43:23.916" endtime="20231004 13:43:23.917"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>${max_length}</value>
<iter>
<var name="${i}">0</var>
<kw name="Evaluate" library="BuiltIn">
<var>${result}</var>
<arg>${installed_segments[${i}]} ${evaluator}= ${required_segments[${i}]}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:23.919" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.917" endtime="20231004 13:43:23.919"/>
</kw>
<if>
<branch type="IF" condition="&quot;${evaluator}&quot; != &quot;==&quot;">
<kw name="Exit For Loop If" library="BuiltIn">
<arg>"${result}" == "False"</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:23.920" endtime="20231004 13:43:23.920"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&gt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Stops executing the enclosing FOR loop if the ``condition`` is true.</doc>
<msg timestamp="20231004 13:43:23.923" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20231004 13:43:23.921" endtime="20231004 13:43:23.923"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.920" endtime="20231004 13:43:23.923"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>"${evaluator}" == "&lt;"</arg>
<arg>Exit For Loop If</arg>
<arg>${installed_segments[${i}]} ${evaluator} ${required_segments[${i}]}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.923" endtime="20231004 13:43:23.923"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.920" endtime="20231004 13:43:23.923"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.920" endtime="20231004 13:43:23.923"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.917" endtime="20231004 13:43:23.923"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.917" endtime="20231004 13:43:23.923"/>
</for>
<return>
<value>${result}</value>
<status status="PASS" starttime="20231004 13:43:23.924" endtime="20231004 13:43:23.924"/>
</return>
<msg timestamp="20231004 13:43:23.924" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231004 13:43:23.903" endtime="20231004 13:43:23.924"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Package : ${package}, Version:${required_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.924" level="INFO">Package : python3-setuptools, Version:0</msg>
<status status="PASS" starttime="20231004 13:43:23.924" endtime="20231004 13:43:23.924"/>
</kw>
<if>
<branch type="IF" condition="${status} != True">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${package}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.925" endtime="20231004 13:43:23.925"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.924" endtime="20231004 13:43:23.925"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.924" endtime="20231004 13:43:23.925"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.877" endtime="20231004 13:43:23.925"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.629" endtime="20231004 13:43:23.925"/>
</for>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${error_list}</arg>
<arg>Following package versions are incorrect ${error_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.926" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20231004 13:43:23.925" endtime="20231004 13:43:23.926"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${error_list}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.926" level="INFO">[]</msg>
<status status="PASS" starttime="20231004 13:43:23.926" endtime="20231004 13:43:23.927"/>
</kw>
<doc>Check the versions of the packages installed meets the neccessary minimum values
the test calls the packages_dict dictionary which should be populated with k,v pairs representing
the required package and the minimum supported value</doc>
<status status="PASS" starttime="20231004 13:43:23.623" endtime="20231004 13:43:23.927"/>
</test>
<test id="s1-s2-t3" name="Check library availability" line="63">
<kw name="Step. Run the command 'ldconfig -p' and capture the output" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.930" level="INFO">Run the command 'ldconfig -p' and capture the output</msg>
<status status="PASS" starttime="20231004 13:43:23.930" endtime="20231004 13:43:23.930"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.930" endtime="20231004 13:43:23.930"/>
</kw>
<kw name="Step. Verify that libpam.so.0 is available" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.932" level="INFO">Verify that libpam.so.0 is available</msg>
<status status="PASS" starttime="20231004 13:43:23.931" endtime="20231004 13:43:23.932"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.931" endtime="20231004 13:43:23.932"/>
</kw>
<kw name="Step. Verify that libexpat.so.1 is available" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.933" level="INFO">Verify that libexpat.so.1 is available</msg>
<status status="PASS" starttime="20231004 13:43:23.933" endtime="20231004 13:43:23.933"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.932" endtime="20231004 13:43:23.933"/>
</kw>
<kw name="Step. Verify that libz.so.1 is available" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.935" level="INFO">Verify that libz.so.1 is available</msg>
<status status="PASS" starttime="20231004 13:43:23.934" endtime="20231004 13:43:23.935"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.934" endtime="20231004 13:43:23.935"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${libraries}</var>
<arg>libpam.so.0</arg>
<arg>libexpat.so.1</arg>
<arg>libz.so.1</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.936" level="INFO">${libraries} = ['libpam.so.0', 'libexpat.so.1', 'libz.so.1']</msg>
<status status="PASS" starttime="20231004 13:43:23.936" endtime="20231004 13:43:23.936"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${system_libraries}</var>
<arg>ldconfig -p</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.939" level="INFO">Running command 'ldconfig -p 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:23.945" level="INFO">${system_libraries} = 510 libs found in cache `/etc/ld.so.cache'
	p11-kit-trust.so (libc6,x86-64) =&gt; /lib64/p11-kit-trust.so
	libzstd.so.1 (libc6,x86-64) =&gt; /lib64/libzstd.so.1
	libz.so.1 (libc6,x86-64) =&gt; /lib64/libz.so.1...</msg>
<status status="PASS" starttime="20231004 13:43:23.936" endtime="20231004 13:43:23.945"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${error_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:23.947" level="INFO">${error_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:23.946" endtime="20231004 13:43:23.947"/>
</kw>
<for flavor="IN">
<var>${library}</var>
<value>@{libraries}</value>
<iter>
<var name="${library}">libpam.so.0</var>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Contain</arg>
<arg>${system_libraries}</arg>
<arg>${library}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${system_libraries}</arg>
<arg>${library}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.948" endtime="20231004 13:43:23.948"/>
</kw>
<msg timestamp="20231004 13:43:23.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.949" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.948" endtime="20231004 13:43:23.949"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'PASS'">
<kw name="Log" library="BuiltIn">
<arg>${library} found</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.949" level="INFO">libpam.so.0 found</msg>
<status status="PASS" starttime="20231004 13:43:23.949" endtime="20231004 13:43:23.949"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.949" endtime="20231004 13:43:23.949"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${library}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.950" endtime="20231004 13:43:23.950"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.950" endtime="20231004 13:43:23.950"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.949" endtime="20231004 13:43:23.950"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.947" endtime="20231004 13:43:23.950"/>
</iter>
<iter>
<var name="${library}">libexpat.so.1</var>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Contain</arg>
<arg>${system_libraries}</arg>
<arg>${library}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${system_libraries}</arg>
<arg>${library}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.950" endtime="20231004 13:43:23.951"/>
</kw>
<msg timestamp="20231004 13:43:23.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.951" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.950" endtime="20231004 13:43:23.951"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'PASS'">
<kw name="Log" library="BuiltIn">
<arg>${library} found</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.952" level="INFO">libexpat.so.1 found</msg>
<status status="PASS" starttime="20231004 13:43:23.951" endtime="20231004 13:43:23.952"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.951" endtime="20231004 13:43:23.952"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${library}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.952" endtime="20231004 13:43:23.952"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.952" endtime="20231004 13:43:23.952"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.951" endtime="20231004 13:43:23.952"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.950" endtime="20231004 13:43:23.952"/>
</iter>
<iter>
<var name="${library}">libz.so.1</var>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Contain</arg>
<arg>${system_libraries}</arg>
<arg>${library}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${system_libraries}</arg>
<arg>${library}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:23.953" endtime="20231004 13:43:23.953"/>
</kw>
<msg timestamp="20231004 13:43:23.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:23.954" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:23.952" endtime="20231004 13:43:23.954"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'PASS'">
<kw name="Log" library="BuiltIn">
<arg>${library} found</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.954" level="INFO">libz.so.1 found</msg>
<status status="PASS" starttime="20231004 13:43:23.954" endtime="20231004 13:43:23.954"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.954" endtime="20231004 13:43:23.954"/>
</branch>
<branch type="ELSE">
<kw name="Append To List" library="Collections">
<arg>${error_list}</arg>
<arg>${library}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="NOT RUN" starttime="20231004 13:43:23.954" endtime="20231004 13:43:23.955"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:23.954" endtime="20231004 13:43:23.955"/>
</branch>
<status status="PASS" starttime="20231004 13:43:23.954" endtime="20231004 13:43:23.955"/>
</if>
<status status="PASS" starttime="20231004 13:43:23.952" endtime="20231004 13:43:23.955"/>
</iter>
<status status="PASS" starttime="20231004 13:43:23.947" endtime="20231004 13:43:23.955"/>
</for>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${error_list}</arg>
<arg>Following Libraries are missing ${error_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:23.956" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20231004 13:43:23.955" endtime="20231004 13:43:23.956"/>
</kw>
<doc>Cisco NSO requires that the operating system has specific libraries installed
the test verifies that the "ldconfig -p" output includes each of the libraries mentioned in the
documentation. To adapt modify the list</doc>
<status status="PASS" starttime="20231004 13:43:23.928" endtime="20231004 13:43:23.957"/>
</test>
<test id="s1-s2-t4" name="Check libz library version" line="85">
<kw name="Step. Run the command 'python3 -c &quot;import zlib; print (zlib.ZLIB_VERSION)&quot;'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.961" level="INFO">Run the command 'python3 -c "import zlib; print (zlib.ZLIB_VERSION)"'</msg>
<status status="PASS" starttime="20231004 13:43:23.961" endtime="20231004 13:43:23.961"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.960" endtime="20231004 13:43:23.961"/>
</kw>
<kw name="Step. Verify that the version is &gt;= 1.2.7.1" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:23.963" level="INFO">Verify that the version is &gt;= 1.2.7.1</msg>
<status status="PASS" starttime="20231004 13:43:23.962" endtime="20231004 13:43:23.963"/>
</kw>
<status status="PASS" starttime="20231004 13:43:23.962" endtime="20231004 13:43:23.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${desired_major_version}</var>
<arg>1.2</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.964" level="INFO">${desired_major_version} = 1.2</msg>
<status status="PASS" starttime="20231004 13:43:23.963" endtime="20231004 13:43:23.964"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${desired_minor_version}</var>
<arg>7.1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:23.965" level="INFO">${desired_minor_version} = 7.1</msg>
<status status="PASS" starttime="20231004 13:43:23.964" endtime="20231004 13:43:23.965"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${libz_version}</var>
<arg>python3 -c "import zlib; print (zlib.ZLIB_VERSION)"</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:23.970" level="INFO">Running command 'python3 -c "import zlib; print (zlib.ZLIB_VERSION)" 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.000" level="INFO">${libz_version} = 1.2.11</msg>
<status status="PASS" starttime="20231004 13:43:23.966" endtime="20231004 13:43:24.000"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${found_major_version}</var>
<arg>${libz_version}</arg>
<arg>^(\\d+\\.\\d+)\\.(.*)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:24.002" level="INFO">${found_major_version} = ['1.2']</msg>
<status status="PASS" starttime="20231004 13:43:24.001" endtime="20231004 13:43:24.002"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${found_minor_version}</var>
<arg>${libz_version}</arg>
<arg>^(\\d+\\.\\d+)\\.(.*)</arg>
<arg>2</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:24.004" level="INFO">${found_minor_version} = ['11']</msg>
<status status="PASS" starttime="20231004 13:43:24.003" endtime="20231004 13:43:24.004"/>
</kw>
<if>
<branch type="IF" condition="${found_major_version[0]} == ${desired_major_version}">
<kw name="Log" library="BuiltIn">
<arg>Going to evaluate : ${found_minor_version[0]} &gt; ${desired_minor_version}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.006" level="INFO">Going to evaluate : 11 &gt; 7.1</msg>
<status status="PASS" starttime="20231004 13:43:24.005" endtime="20231004 13:43:24.006"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${log}</var>
<arg>${found_minor_version[0]} &gt; ${desired_minor_version}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:24.007" level="INFO">${log} = True</msg>
<status status="PASS" starttime="20231004 13:43:24.006" endtime="20231004 13:43:24.007"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${log}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.008" level="INFO">True</msg>
<status status="PASS" starttime="20231004 13:43:24.008" endtime="20231004 13:43:24.008"/>
</kw>
<if>
<branch type="IF" condition="${found_minor_version[0]} &gt;= ${desired_minor_version}">
<kw name="Log" library="BuiltIn">
<arg>Found ${found_major_version[0]}.${found_minor_version[0]} is greater than minimum</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.010" level="INFO">Found 1.2.11 is greater than minimum</msg>
<status status="PASS" starttime="20231004 13:43:24.009" endtime="20231004 13:43:24.010"/>
</kw>
<kw name="Pass Execution" library="BuiltIn">
<arg>Major meets requirements, and Minor is greater or equal ${found_major_version[0]}.${found_minor_version[0]}</arg>
<doc>Skips rest of the current test, setup, or teardown with PASS status.</doc>
<msg timestamp="20231004 13:43:24.012" level="INFO">Execution passed with message:
Major meets requirements, and Minor is greater or equal 1.2.11</msg>
<status status="PASS" starttime="20231004 13:43:24.010" endtime="20231004 13:43:24.012"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.008" endtime="20231004 13:43:24.012"/>
</branch>
<branch type="ELSE">
<kw name="Log" library="BuiltIn">
<arg>Found ${found_major_version[0]}.${found_minor_version[0]} this is lower than expected</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:24.012" endtime="20231004 13:43:24.012"/>
</kw>
<kw name="Fail" library="BuiltIn">
<arg>Unsupported version of Libz found ${found_major_version[0]}.${found_minor_version[0]}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20231004 13:43:24.013" endtime="20231004 13:43:24.013"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:24.012" endtime="20231004 13:43:24.013"/>
</branch>
<status status="PASS" starttime="20231004 13:43:24.008" endtime="20231004 13:43:24.013"/>
</if>
<status status="PASS" starttime="20231004 13:43:24.004" endtime="20231004 13:43:24.013"/>
</branch>
<branch type="ELSE IF" condition="${found_major_version[0]} &gt; ${desired_major_version}">
<kw name="Log" library="BuiltIn">
<arg>Found ${found_major_version} is greater than minimum, skipping minor check</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20231004 13:43:24.013" endtime="20231004 13:43:24.013"/>
</kw>
<kw name="Pass Execution" library="BuiltIn">
<arg>Major version is greater that required , skipping minor check.</arg>
<doc>Skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="NOT RUN" starttime="20231004 13:43:24.013" endtime="20231004 13:43:24.013"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:24.013" endtime="20231004 13:43:24.013"/>
</branch>
<branch type="ELSE">
<kw name="Fail" library="BuiltIn">
<arg>Unsupported version of Libz found ${found_major_version[0]}.${found_minor_version[0]}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20231004 13:43:24.013" endtime="20231004 13:43:24.013"/>
</kw>
<status status="NOT RUN" starttime="20231004 13:43:24.013" endtime="20231004 13:43:24.013"/>
</branch>
<status status="PASS" starttime="20231004 13:43:24.004" endtime="20231004 13:43:24.014"/>
</if>
<doc>Cisco NSO requires a minimimum version of 1.2.7.1 for the libz library
this test will verify that the verison installed satisfies this requirement.</doc>
<status status="PASS" starttime="20231004 13:43:23.959" endtime="20231004 13:43:24.015">Major meets requirements, and Minor is greater or equal 1.2.11</status>
</test>
<test id="s1-s2-t5" name="Verify required utilities are available" line="114">
<kw name="Step. Using the command 'which' verify that tar, gzip, find, and ssh-keygen utilities are in the the system $PATH" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.020" level="INFO">Using the command 'which' verify that tar, gzip, find, and ssh-keygen utilities are in the the system $PATH</msg>
<status status="PASS" starttime="20231004 13:43:24.020" endtime="20231004 13:43:24.020"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.019" endtime="20231004 13:43:24.020"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${command}</var>
<arg>which</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:24.021" level="INFO">${command} = which</msg>
<status status="PASS" starttime="20231004 13:43:24.020" endtime="20231004 13:43:24.021"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${check_string}</var>
<arg>/usr/bin/which: no</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:24.021" level="INFO">${check_string} = /usr/bin/which: no</msg>
<status status="PASS" starttime="20231004 13:43:24.021" endtime="20231004 13:43:24.021"/>
</kw>
<kw name="Iterate Over List and Run Command" library="keywords">
<arg>${utility_list}</arg>
<arg>${command}</arg>
<arg>${check_string}</arg>
<doc>Iterates through list and runs the provided command, checking that the error string is not in the response</doc>
<kw name="Log" library="BuiltIn">
<arg>${list}</arg>
<arg>DEBUG</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" starttime="20231004 13:43:24.022" endtime="20231004 13:43:24.023"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${errors_list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20231004 13:43:24.023" level="INFO">${errors_list} = []</msg>
<status status="PASS" starttime="20231004 13:43:24.023" endtime="20231004 13:43:24.023"/>
</kw>
<for flavor="IN">
<var>${item}</var>
<value>@{list}</value>
<iter>
<var name="${item}">tar</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:24.024" level="INFO">${run_cmd} = which tar</msg>
<status status="PASS" starttime="20231004 13:43:24.023" endtime="20231004 13:43:24.024"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.024" level="INFO">which tar</msg>
<status status="PASS" starttime="20231004 13:43:24.024" endtime="20231004 13:43:24.024"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.027" level="INFO">Running command 'which tar 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.033" level="INFO">${output} = /usr/bin/tar</msg>
<status status="PASS" starttime="20231004 13:43:24.024" endtime="20231004 13:43:24.034"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.035" endtime="20231004 13:43:24.035"/>
</kw>
<msg timestamp="20231004 13:43:24.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:24.036" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:24.034" endtime="20231004 13:43:24.036"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:24.036" endtime="20231004 13:43:24.036"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.023" endtime="20231004 13:43:24.036"/>
</iter>
<iter>
<var name="${item}">gzip</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:24.037" level="INFO">${run_cmd} = which gzip</msg>
<status status="PASS" starttime="20231004 13:43:24.037" endtime="20231004 13:43:24.037"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.037" level="INFO">which gzip</msg>
<status status="PASS" starttime="20231004 13:43:24.037" endtime="20231004 13:43:24.037"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.040" level="INFO">Running command 'which gzip 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.047" level="INFO">${output} = /usr/bin/gzip</msg>
<status status="PASS" starttime="20231004 13:43:24.038" endtime="20231004 13:43:24.047"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.048" endtime="20231004 13:43:24.049"/>
</kw>
<msg timestamp="20231004 13:43:24.049" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:24.050" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:24.047" endtime="20231004 13:43:24.050"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:24.050" endtime="20231004 13:43:24.051"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.036" endtime="20231004 13:43:24.051"/>
</iter>
<iter>
<var name="${item}">find</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:24.052" level="INFO">${run_cmd} = which find</msg>
<status status="PASS" starttime="20231004 13:43:24.051" endtime="20231004 13:43:24.052"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.053" level="INFO">which find</msg>
<status status="PASS" starttime="20231004 13:43:24.052" endtime="20231004 13:43:24.053"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.058" level="INFO">Running command 'which find 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.065" level="INFO">${output} = /usr/bin/find</msg>
<status status="PASS" starttime="20231004 13:43:24.054" endtime="20231004 13:43:24.065"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.067" endtime="20231004 13:43:24.067"/>
</kw>
<msg timestamp="20231004 13:43:24.068" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:24.068" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:24.066" endtime="20231004 13:43:24.068"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:24.068" endtime="20231004 13:43:24.069"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.051" endtime="20231004 13:43:24.069"/>
</iter>
<iter>
<var name="${item}">ssh-keygen</var>
<kw name="Catenate" library="BuiltIn">
<var>${run_cmd}</var>
<arg>${command}</arg>
<arg>${item}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20231004 13:43:24.069" level="INFO">${run_cmd} = which ssh-keygen</msg>
<status status="PASS" starttime="20231004 13:43:24.069" endtime="20231004 13:43:24.069"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${run_cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.070" level="INFO">which ssh-keygen</msg>
<status status="PASS" starttime="20231004 13:43:24.070" endtime="20231004 13:43:24.070"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>${run_cmd}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.074" level="INFO">Running command 'which ssh-keygen 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.080" level="INFO">${output} = /usr/bin/ssh-keygen</msg>
<status status="PASS" starttime="20231004 13:43:24.070" endtime="20231004 13:43:24.080"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${status}</var>
<var>${status_message}</var>
<arg>Should Not Contain</arg>
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${check_string}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.081" endtime="20231004 13:43:24.082"/>
</kw>
<msg timestamp="20231004 13:43:24.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20231004 13:43:24.082" level="INFO">${status_message} = None</msg>
<status status="PASS" starttime="20231004 13:43:24.081" endtime="20231004 13:43:24.082"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}' != 'PASS'</arg>
<arg>Append To List</arg>
<arg>${errors_list}</arg>
<arg>${item}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231004 13:43:24.082" endtime="20231004 13:43:24.083"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.069" endtime="20231004 13:43:24.083"/>
</iter>
<status status="PASS" starttime="20231004 13:43:24.023" endtime="20231004 13:43:24.083"/>
</for>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${errors_list}</arg>
<arg>Item(S) Not Found : ${errors_list}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231004 13:43:24.083" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20231004 13:43:24.083" endtime="20231004 13:43:24.084"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.022" endtime="20231004 13:43:24.084"/>
</kw>
<doc>Cisco NSO requires some utilities, this test verfies these binaries exist</doc>
<tag>os</tag>
<tag>packages</tag>
<status status="PASS" starttime="20231004 13:43:24.018" endtime="20231004 13:43:24.084"/>
</test>
<test id="s1-s2-t6" name="Verify correct version of Python is active" line="122">
<kw name="Step. Run the command 'python --version'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.089" level="INFO">Run the command 'python --version'</msg>
<status status="PASS" starttime="20231004 13:43:24.089" endtime="20231004 13:43:24.089"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.088" endtime="20231004 13:43:24.090"/>
</kw>
<kw name="Step. Verify that the verison is &gt;= to 3.8" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.092" level="INFO">Verify that the verison is &gt;= to 3.8</msg>
<status status="PASS" starttime="20231004 13:43:24.091" endtime="20231004 13:43:24.092"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.090" endtime="20231004 13:43:24.092"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${python_version}</var>
<arg>python --version</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.096" level="INFO">Running command 'python --version 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.103" level="INFO">${python_version} = Python 3.9.16</msg>
<status status="PASS" starttime="20231004 13:43:24.092" endtime="20231004 13:43:24.103"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${python_major_version}</var>
<arg>${python_version}</arg>
<arg>Python (\\d+\.\\d+)</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20231004 13:43:24.106" level="INFO">${python_major_version} = ['3.9']</msg>
<status status="PASS" starttime="20231004 13:43:24.105" endtime="20231004 13:43:24.106"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${desired_version}</var>
<arg>3.08</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:24.107" level="INFO">${desired_version} = 3.08</msg>
<status status="PASS" starttime="20231004 13:43:24.106" endtime="20231004 13:43:24.107"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${status}</var>
<arg>${python_major_version[0]} &gt;= ${desired_version}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231004 13:43:24.109" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20231004 13:43:24.107" endtime="20231004 13:43:24.109"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} == True</arg>
<arg>Pass Execution</arg>
<arg>Active Version of Python meets the minimum requirements</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>Active Python verison doesnt meet the requirements, review your alternatives-config to see if</arg>
<arg>correct version is active, or install the correct verison.</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Pass Execution" library="BuiltIn">
<arg>Active Version of Python meets the minimum requirements</arg>
<doc>Skips rest of the current test, setup, or teardown with PASS status.</doc>
<msg timestamp="20231004 13:43:24.111" level="INFO">Execution passed with message:
Active Version of Python meets the minimum requirements</msg>
<status status="PASS" starttime="20231004 13:43:24.111" endtime="20231004 13:43:24.111"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.110" endtime="20231004 13:43:24.111"/>
</kw>
<doc>We require a python verison &gt; 3.7 this test will validatre the
active python environmnet meets this requirement</doc>
<tag>os</tag>
<tag>packages</tag>
<status status="PASS" starttime="20231004 13:43:24.087" endtime="20231004 13:43:24.111">Active Version of Python meets the minimum requirements</status>
</test>
<test id="s1-s2-t7" name="Verify Hostname is not set to localhost" line="138">
<kw name="Step. Run the command 'hostnamectl hostname'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.116" level="INFO">Run the command 'hostnamectl hostname'</msg>
<status status="PASS" starttime="20231004 13:43:24.115" endtime="20231004 13:43:24.116"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.114" endtime="20231004 13:43:24.116"/>
</kw>
<kw name="Step. Verify that the system hostname is not set to 'localhost'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.119" level="INFO">Verify that the system hostname is not set to 'localhost'</msg>
<status status="PASS" starttime="20231004 13:43:24.118" endtime="20231004 13:43:24.119"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.118" endtime="20231004 13:43:24.119"/>
</kw>
<kw name="Step. Verify taht the hostname is set to the expected value" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.120" level="INFO">Verify taht the hostname is set to the expected value</msg>
<status status="PASS" starttime="20231004 13:43:24.120" endtime="20231004 13:43:24.120"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.120" endtime="20231004 13:43:24.120"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>hostnamectl hostname</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.124" level="INFO">Running command 'hostnamectl hostname 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.220" level="INFO">${output} = robot-dev-rhel-9.2</msg>
<status status="PASS" starttime="20231004 13:43:24.121" endtime="20231004 13:43:24.221"/>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>localhost</arg>
<doc>Fails if objects are equal after converting them to strings.</doc>
<status status="PASS" starttime="20231004 13:43:24.221" endtime="20231004 13:43:24.223"/>
</kw>
<doc>Hostname Should not be localhost</doc>
<tag>dns</tag>
<tag>os</tag>
<status status="PASS" starttime="20231004 13:43:24.113" endtime="20231004 13:43:24.224"/>
</test>
<test id="s1-s2-t8" name="Verify DNS servers are Configured" line="147">
<kw name="Step. View the file '/etc/resolv.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.230" level="INFO">View the file '/etc/resolv.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.230" endtime="20231004 13:43:24.230"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.228" endtime="20231004 13:43:24.230"/>
</kw>
<kw name="Step. Verify that the neccesary DNS hosts are visible" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.233" level="INFO">Verify that the neccesary DNS hosts are visible</msg>
<status status="PASS" starttime="20231004 13:43:24.233" endtime="20231004 13:43:24.233"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.232" endtime="20231004 13:43:24.233"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>more /etc/resolv.conf</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.237" level="INFO">Running command 'more /etc/resolv.conf 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.244" level="INFO">${output} = # Generated by NetworkManager
search localdomain 2
nameserver 172.16.167.2</msg>
<status status="PASS" starttime="20231004 13:43:24.235" endtime="20231004 13:43:24.244"/>
</kw>
<for flavor="IN">
<var>${dns_server}</var>
<value>@{dns_servers}</value>
<iter>
<var name="${dns_server}">192.168.1.1</var>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${dns_server}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20231004 13:43:24.247" level="FAIL">'# Generated by NetworkManager
search localdomain 2
nameserver 172.16.167.2' does not contain '192.168.1.1'</msg>
<status status="FAIL" starttime="20231004 13:43:24.246" endtime="20231004 13:43:24.247"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:24.246" endtime="20231004 13:43:24.247"/>
</iter>
<status status="FAIL" starttime="20231004 13:43:24.245" endtime="20231004 13:43:24.247"/>
</for>
<doc>DNS Servers should be Configured</doc>
<tag>dns</tag>
<tag>os</tag>
<status status="FAIL" starttime="20231004 13:43:24.226" endtime="20231004 13:43:24.248">'# Generated by NetworkManager
search localdomain 2
nameserver 172.16.167.2' does not contain '192.168.1.1'</status>
</test>
<test id="s1-s2-t9" name="Verify NTP servers are Configured" line="157">
<kw name="Step. Run the command 'chronyc sources'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.253" level="INFO">Run the command 'chronyc sources'</msg>
<status status="PASS" starttime="20231004 13:43:24.253" endtime="20231004 13:43:24.253"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.252" endtime="20231004 13:43:24.253"/>
</kw>
<kw name="Step. Verify that the neccesary NTP sources are visible" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.254" level="INFO">Verify that the neccesary NTP sources are visible</msg>
<status status="PASS" starttime="20231004 13:43:24.254" endtime="20231004 13:43:24.254"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.254" endtime="20231004 13:43:24.255"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>chronyc sources</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.258" level="INFO">Running command 'chronyc sources 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.423" level="INFO">${output} = MS Name/IP address         Stratum Poll Reach LastRx Last sample               
===============================================================================
^- ntp4.bit.nl                   1   6  ...</msg>
<status status="PASS" starttime="20231004 13:43:24.255" endtime="20231004 13:43:24.423"/>
</kw>
<for flavor="IN">
<var>${ntp_server}</var>
<value>@{ntp_servers}</value>
<iter>
<var name="${ntp_server}">ntp1.trans-ix.nl</var>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${ntp_server}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20231004 13:43:24.426" level="FAIL">'MS Name/IP address         Stratum Poll Reach LastRx Last sample               
===============================================================================
^- ntp4.bit.nl                   1   6   377    24    +26ms[  +26ms] +/-  308ms
^* 159.203.82.102                4   6   377    63    -31ms[  -71ms] +/-   48ms
^+ europa.ellipse.net            2   6   377     4    +46ms[  +46ms] +/-  106ms
^+ ns.bgp.co                     2   6   377    41  +1279us[+1279us] +/-   98ms' does not contain 'ntp1.trans-ix.nl'</msg>
<status status="FAIL" starttime="20231004 13:43:24.425" endtime="20231004 13:43:24.426"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:24.425" endtime="20231004 13:43:24.426"/>
</iter>
<status status="FAIL" starttime="20231004 13:43:24.424" endtime="20231004 13:43:24.426"/>
</for>
<doc>NTP Servers should be Configured</doc>
<tag>ntp</tag>
<tag>os</tag>
<status status="FAIL" starttime="20231004 13:43:24.251" endtime="20231004 13:43:24.427">'MS Name/IP address         Stratum Poll Reach LastRx Last sample               
===============================================================================
^- ntp4.bit.nl                   1   6   377    24    +26ms[  +26ms] +/-  308ms
^* 159.203.82.102                4   6   377    63    -31ms[  -71ms] +/-   48ms
^+ europa.ellipse.net            2   6   377     4    +46ms[  +46ms] +/-  106ms
^+ ns.bgp.co                     2   6   377    41  +1279us[+1279us] +/-   98ms' does not contain 'ntp1.trans-ix.nl'</status>
</test>
<test id="s1-s2-t10" name="Verify NTP service is active" line="167">
<kw name="Step. Run the command 'timedatectl show'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.432" level="INFO">Run the command 'timedatectl show'</msg>
<status status="PASS" starttime="20231004 13:43:24.432" endtime="20231004 13:43:24.432"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.431" endtime="20231004 13:43:24.432"/>
</kw>
<kw name="Step. Verify that the system shows NTPSynchronized=yes" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.434" level="INFO">Verify that the system shows NTPSynchronized=yes</msg>
<status status="PASS" starttime="20231004 13:43:24.433" endtime="20231004 13:43:24.434"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.433" endtime="20231004 13:43:24.434"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${output}</var>
<arg>timedatectl show | grep -Po '(?&lt;=NTPSynchronized=)[^,]+'</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.437" level="INFO">Running command 'timedatectl show | grep -Po '(?&lt;=NTPSynchronized=)[^,]+' 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.536" level="INFO">${output} = yes</msg>
<status status="PASS" starttime="20231004 13:43:24.434" endtime="20231004 13:43:24.536"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>yes</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20231004 13:43:24.537" endtime="20231004 13:43:24.539"/>
</kw>
<doc>Check that the NTP service is active</doc>
<tag>ntp</tag>
<tag>os</tag>
<status status="PASS" starttime="20231004 13:43:24.430" endtime="20231004 13:43:24.539"/>
</test>
<doc>The following tests verify the operating system configuration &amp; dependency packages
are present in preperation for the Cisco NSO application testing. The checks include:
- dependent packages are available
- required utilities are present
- hostname has been changed
- DNS and NTP serviecs are configured and active

Refer to the SCDP documentation to address any failed tests.</doc>
<status status="FAIL" starttime="20231004 13:43:23.462" endtime="20231004 13:43:24.542"/>
</suite>
<suite id="s1-s3" name="NSO Configuration (ncs.conf) Validations" source="/mnt/vm-shared/robot-dev/rhel-dev/ncs_conf.robot">
<test id="s1-s3-t1" name="Verify ncs-ipc-access-check is enabled" line="22">
<kw name="Step. View the file '/etc/ncs/ncs.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.583" level="INFO">View the file '/etc/ncs/ncs.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.582" endtime="20231004 13:43:24.583"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.582" endtime="20231004 13:43:24.583"/>
</kw>
<kw name="Step. Locate the 'ncs-ipc-access-check/enabled' configuration" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.584" level="INFO">Locate the 'ncs-ipc-access-check/enabled' configuration</msg>
<status status="PASS" starttime="20231004 13:43:24.584" endtime="20231004 13:43:24.584"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.583" endtime="20231004 13:43:24.584"/>
</kw>
<kw name="Step. Verify the value is set to true" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.585" level="INFO">Verify the value is set to true</msg>
<status status="PASS" starttime="20231004 13:43:24.585" endtime="20231004 13:43:24.585"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.585" endtime="20231004 13:43:24.585"/>
</kw>
<kw name="Check NCS Config Against String Value" library="ncs.keywords">
<arg>ncs-ipc-access-check/enabled</arg>
<arg>true</arg>
<kw name="Get Element Text" library="XML">
<var>${xml}</var>
<arg>${NCS_CONF_PATH}</arg>
<arg>${xpath}</arg>
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<msg timestamp="20231004 13:43:24.588" level="INFO">${xml} = false</msg>
<status status="PASS" starttime="20231004 13:43:24.586" endtime="20231004 13:43:24.588"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${xml}</arg>
<arg>${expected_output}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20231004 13:43:24.589" level="FAIL">'false' does not contain 'true'</msg>
<status status="FAIL" starttime="20231004 13:43:24.588" endtime="20231004 13:43:24.589"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:24.586" endtime="20231004 13:43:24.589"/>
</kw>
<doc>Verify that ncs-ipc-access-check is enabled</doc>
<tag>nso</tag>
<status status="FAIL" starttime="20231004 13:43:24.581" endtime="20231004 13:43:24.589">'false' does not contain 'true'</status>
</test>
<test id="s1-s3-t2" name="Verify External Authentication Is enabled" line="30">
<kw name="Step. View the file '/etc/ncs/ncs.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.593" level="INFO">View the file '/etc/ncs/ncs.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.592" endtime="20231004 13:43:24.593"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.592" endtime="20231004 13:43:24.593"/>
</kw>
<kw name="Step. Locate the 'aaa/external-authentication/enabled' configuration" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.594" level="INFO">Locate the 'aaa/external-authentication/enabled' configuration</msg>
<status status="PASS" starttime="20231004 13:43:24.594" endtime="20231004 13:43:24.594"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.593" endtime="20231004 13:43:24.594"/>
</kw>
<kw name="Step. Verify the value is set to true" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.595" level="INFO">Verify the value is set to true</msg>
<status status="PASS" starttime="20231004 13:43:24.595" endtime="20231004 13:43:24.595"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.594" endtime="20231004 13:43:24.595"/>
</kw>
<kw name="Check NCS Config Against String Value" library="ncs.keywords">
<arg>aaa/external-authentication/enabled</arg>
<arg>true</arg>
<kw name="Get Element Text" library="XML">
<var>${xml}</var>
<arg>${NCS_CONF_PATH}</arg>
<arg>${xpath}</arg>
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<msg timestamp="20231004 13:43:24.597" level="INFO">${xml} = true</msg>
<status status="PASS" starttime="20231004 13:43:24.596" endtime="20231004 13:43:24.597"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${xml}</arg>
<arg>${expected_output}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.597" endtime="20231004 13:43:24.598"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.595" endtime="20231004 13:43:24.598"/>
</kw>
<doc>External Authentication should be enabled to authenticate users</doc>
<tag>nso</tag>
<status status="PASS" starttime="20231004 13:43:24.591" endtime="20231004 13:43:24.598"/>
</test>
<test id="s1-s3-t3" name="Verify External Authentication Script Exists" line="39">
<kw name="Step. View the file '/etc/ncs/ncs.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.601" level="INFO">View the file '/etc/ncs/ncs.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.601" endtime="20231004 13:43:24.602"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.601" endtime="20231004 13:43:24.602"/>
</kw>
<kw name="Step. Locate the 'aaa/external-authentication/executable' configuration" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.603" level="INFO">Locate the 'aaa/external-authentication/executable' configuration</msg>
<status status="PASS" starttime="20231004 13:43:24.602" endtime="20231004 13:43:24.603"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.602" endtime="20231004 13:43:24.603"/>
</kw>
<kw name="Step. Record the vlaue of the executable" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.604" level="INFO">Record the vlaue of the executable</msg>
<status status="PASS" starttime="20231004 13:43:24.604" endtime="20231004 13:43:24.604"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.603" endtime="20231004 13:43:24.604"/>
</kw>
<kw name="Step. Verify the executable exists using the comand 'ls {file_path}'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.605" level="INFO">Verify the executable exists using the comand 'ls {file_path}'</msg>
<status status="PASS" starttime="20231004 13:43:24.605" endtime="20231004 13:43:24.605"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.604" endtime="20231004 13:43:24.605"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>aaa/external-authentication/executable</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:24.606" level="INFO">${xpath} = aaa/external-authentication/executable</msg>
<status status="PASS" starttime="20231004 13:43:24.606" endtime="20231004 13:43:24.606"/>
</kw>
<kw name="Get Element Text" library="XML">
<var>${auth_file}</var>
<arg>${NCS_CONF_PATH}</arg>
<arg>${xpath}</arg>
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<msg timestamp="20231004 13:43:24.608" level="INFO">${auth_file} = /etc/ncs/my-test-auth.sh</msg>
<status status="PASS" starttime="20231004 13:43:24.607" endtime="20231004 13:43:24.608"/>
</kw>
<kw name="Should Exist" library="OperatingSystem">
<arg>${auth_file}</arg>
<doc>Fails unless the given path (file or directory) exists.</doc>
<msg timestamp="20231004 13:43:24.609" level="INFO" html="true">Path '&lt;a href="file:///etc/ncs/my-test-auth.sh"&gt;/etc/ncs/my-test-auth.sh&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20231004 13:43:24.608" endtime="20231004 13:43:24.609"/>
</kw>
<doc>If External Auth is enabled check the script called Exists</doc>
<tag>nso</tag>
<status status="PASS" starttime="20231004 13:43:24.600" endtime="20231004 13:43:24.609"/>
</test>
<test id="s1-s3-t4" name="Verify netconf-north-bound (GLOBAL) is enabled" line="50">
<kw name="Step. View the file '/etc/ncs/ncs.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.613" level="INFO">View the file '/etc/ncs/ncs.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.613" endtime="20231004 13:43:24.613"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.612" endtime="20231004 13:43:24.613"/>
</kw>
<kw name="Step. Locate the 'netconf-north-bound/enabled' configuration" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.614" level="INFO">Locate the 'netconf-north-bound/enabled' configuration</msg>
<status status="PASS" starttime="20231004 13:43:24.614" endtime="20231004 13:43:24.614"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.614" endtime="20231004 13:43:24.615"/>
</kw>
<kw name="Step. Verify the value is set to true" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.616" level="INFO">Verify the value is set to true</msg>
<status status="PASS" starttime="20231004 13:43:24.615" endtime="20231004 13:43:24.616"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.615" endtime="20231004 13:43:24.616"/>
</kw>
<kw name="Check NCS Config Against String Value" library="ncs.keywords">
<arg>netconf-north-bound/enabled</arg>
<arg>true</arg>
<kw name="Get Element Text" library="XML">
<var>${xml}</var>
<arg>${NCS_CONF_PATH}</arg>
<arg>${xpath}</arg>
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<msg timestamp="20231004 13:43:24.618" level="INFO">${xml} = true</msg>
<status status="PASS" starttime="20231004 13:43:24.617" endtime="20231004 13:43:24.618"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${xml}</arg>
<arg>${expected_output}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.618" endtime="20231004 13:43:24.619"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.616" endtime="20231004 13:43:24.619"/>
</kw>
<doc>Netconf North Bound interface should be enabled</doc>
<tag>nso</tag>
<status status="PASS" starttime="20231004 13:43:24.611" endtime="20231004 13:43:24.619"/>
</test>
<test id="s1-s3-t5" name="Verify netconf-north-bound (SSH) is enabled" line="58">
<kw name="Step. View the file '/etc/ncs/ncs.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.622" level="INFO">View the file '/etc/ncs/ncs.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.622" endtime="20231004 13:43:24.622"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.621" endtime="20231004 13:43:24.622"/>
</kw>
<kw name="Step. Locate the 'netconf-north-bound/transport/ssh/enabled' configuration" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.623" level="INFO">Locate the 'netconf-north-bound/transport/ssh/enabled' configuration</msg>
<status status="PASS" starttime="20231004 13:43:24.623" endtime="20231004 13:43:24.623"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.622" endtime="20231004 13:43:24.623"/>
</kw>
<kw name="Step. Verify the value is set to true" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.624" level="INFO">Verify the value is set to true</msg>
<status status="PASS" starttime="20231004 13:43:24.624" endtime="20231004 13:43:24.624"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.624" endtime="20231004 13:43:24.624"/>
</kw>
<kw name="Check NCS Config Against String Value" library="ncs.keywords">
<arg>netconf-north-bound/transport/ssh/enabled</arg>
<arg>true</arg>
<kw name="Get Element Text" library="XML">
<var>${xml}</var>
<arg>${NCS_CONF_PATH}</arg>
<arg>${xpath}</arg>
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<msg timestamp="20231004 13:43:24.626" level="INFO">${xml} = true</msg>
<status status="PASS" starttime="20231004 13:43:24.625" endtime="20231004 13:43:24.626"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${xml}</arg>
<arg>${expected_output}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.626" endtime="20231004 13:43:24.627"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.625" endtime="20231004 13:43:24.627"/>
</kw>
<doc>Netconf North Bound interface should be enabled</doc>
<tag>nso</tag>
<status status="PASS" starttime="20231004 13:43:24.620" endtime="20231004 13:43:24.628"/>
</test>
<test id="s1-s3-t6" name="Verify netconf-north-bound is (TELNET) is disabled" line="66">
<kw name="Step. View the file '/etc/ncs/ncs.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.631" level="INFO">View the file '/etc/ncs/ncs.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.631" endtime="20231004 13:43:24.631"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.630" endtime="20231004 13:43:24.631"/>
</kw>
<kw name="Step. Locate the 'netconf-north-bound/transport/tcp/enabled' configuration" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.632" level="INFO">Locate the 'netconf-north-bound/transport/tcp/enabled' configuration</msg>
<status status="PASS" starttime="20231004 13:43:24.632" endtime="20231004 13:43:24.633"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.632" endtime="20231004 13:43:24.633"/>
</kw>
<kw name="Step. Verify the value is set to false" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.634" level="INFO">Verify the value is set to false</msg>
<status status="PASS" starttime="20231004 13:43:24.634" endtime="20231004 13:43:24.634"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.633" endtime="20231004 13:43:24.634"/>
</kw>
<kw name="Check NCS Config Against String Value" library="ncs.keywords">
<arg>netconf-north-bound/transport/tcp/enabled</arg>
<arg>false</arg>
<kw name="Get Element Text" library="XML">
<var>${xml}</var>
<arg>${NCS_CONF_PATH}</arg>
<arg>${xpath}</arg>
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<msg timestamp="20231004 13:43:24.637" level="INFO">${xml} = false</msg>
<status status="PASS" starttime="20231004 13:43:24.635" endtime="20231004 13:43:24.637"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${xml}</arg>
<arg>${expected_output}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.637" endtime="20231004 13:43:24.637"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.635" endtime="20231004 13:43:24.637"/>
</kw>
<doc>Netconf North Bound interface should be enabled</doc>
<tag>nso</tag>
<status status="PASS" starttime="20231004 13:43:24.629" endtime="20231004 13:43:24.638"/>
</test>
<test id="s1-s3-t7" name="Verify High-Availability Is Enabled in ncs.conf" line="74">
<kw name="Step. View the file '/etc/ncs/ncs.conf'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.641" level="INFO">View the file '/etc/ncs/ncs.conf'</msg>
<status status="PASS" starttime="20231004 13:43:24.641" endtime="20231004 13:43:24.641"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.640" endtime="20231004 13:43:24.641"/>
</kw>
<kw name="Step. Locate the 'ha/enabled' configuration" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.642" level="INFO">Locate the 'ha/enabled' configuration</msg>
<status status="PASS" starttime="20231004 13:43:24.642" endtime="20231004 13:43:24.642"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.642" endtime="20231004 13:43:24.642"/>
</kw>
<kw name="Step. Verify the value is set to true" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.643" level="INFO">Verify the value is set to true</msg>
<status status="PASS" starttime="20231004 13:43:24.643" endtime="20231004 13:43:24.644"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.643" endtime="20231004 13:43:24.644"/>
</kw>
<kw name="Check NCS Config Against String Value" library="ncs.keywords">
<arg>ha/enabled</arg>
<arg>true</arg>
<kw name="Get Element Text" library="XML">
<var>${xml}</var>
<arg>${NCS_CONF_PATH}</arg>
<arg>${xpath}</arg>
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<msg timestamp="20231004 13:43:24.645" level="FAIL">No element matching 'ha/enabled' found.</msg>
<status status="FAIL" starttime="20231004 13:43:24.644" endtime="20231004 13:43:24.646"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${xml}</arg>
<arg>${expected_output}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20231004 13:43:24.646" endtime="20231004 13:43:24.646"/>
</kw>
<status status="FAIL" starttime="20231004 13:43:24.644" endtime="20231004 13:43:24.646"/>
</kw>
<doc>Verify that High-Availability is enabled in the ncs.conf file</doc>
<tag>nso</tag>
<status status="FAIL" starttime="20231004 13:43:24.639" endtime="20231004 13:43:24.646">No element matching 'ha/enabled' found.</status>
</test>
<doc>The following tests validate that the /etc/ncs/ncs.conf file has
been correctly configured with the required values. The faile can be viewed
by accessing the server and simply using the commands:
- cat /etc/ncs/ncs.conf
- more /etc/ncs/ncs.conf</doc>
<status status="FAIL" starttime="20231004 13:43:24.545" endtime="20231004 13:43:24.648"/>
</suite>
<suite id="s1-s4" name="NSO Configuration (Running Config) Validation" source="/mnt/vm-shared/robot-dev/rhel-dev/nso_configuration.robot">
<test id="s1-s4-t1" name="Is the NSO Service (NCS) Running" line="28">
<kw name="Step. Run the command 'systemctl is-active ncs'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.669" level="INFO">Run the command 'systemctl is-active ncs'</msg>
<status status="PASS" starttime="20231004 13:43:24.669" endtime="20231004 13:43:24.669"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.668" endtime="20231004 13:43:24.669"/>
</kw>
<kw name="Step. Verify that the NCS process is active" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.670" level="INFO">Verify that the NCS process is active</msg>
<status status="PASS" starttime="20231004 13:43:24.670" endtime="20231004 13:43:24.670"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.669" endtime="20231004 13:43:24.670"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${status}</var>
<arg>systemctl is-active ncs</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.674" level="INFO">Running command 'systemctl is-active ncs 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.689" level="INFO">${status} = active</msg>
<status status="PASS" starttime="20231004 13:43:24.671" endtime="20231004 13:43:24.690"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${expected_output}</var>
<arg>active</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:24.691" level="INFO">${expected_output} = active</msg>
<status status="PASS" starttime="20231004 13:43:24.690" endtime="20231004 13:43:24.691"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${status}</arg>
<arg>${expected_output}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20231004 13:43:24.691" endtime="20231004 13:43:24.692"/>
</kw>
<doc>We need to verify that the service is running
this test will run the command 'systemctl is-active ncs' and parse the response
test passes if the response is 'actve' any other response will fail
if the test fails, enable the service using the 'systemctl start ncs' command</doc>
<status status="PASS" starttime="20231004 13:43:24.667" endtime="20231004 13:43:24.693"/>
</test>
<test id="s1-s4-t2" name="Is the NSO service (NCS) enabled on boot" line="40">
<kw name="Step. Run the command 'systemctl is-enabled ncs'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.696" level="INFO">Run the command 'systemctl is-enabled ncs'</msg>
<status status="PASS" starttime="20231004 13:43:24.696" endtime="20231004 13:43:24.696"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.696" endtime="20231004 13:43:24.697"/>
</kw>
<kw name="Step. Verify that the NCS process is Enabled for auto-start" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.698" level="INFO">Verify that the NCS process is Enabled for auto-start</msg>
<status status="PASS" starttime="20231004 13:43:24.698" endtime="20231004 13:43:24.699"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.698" endtime="20231004 13:43:24.699"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${status}</var>
<arg>systemctl is-enabled ncs</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.703" level="INFO">Running command 'systemctl is-enabled ncs 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.722" level="INFO">${status} = ncs.service is not a native service, redirecting to systemd-sysv-install.
Executing: /usr/lib/systemd/systemd-sysv-install is-enabled ncs
enabled</msg>
<status status="PASS" starttime="20231004 13:43:24.699" endtime="20231004 13:43:24.722"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${expected_output}</var>
<arg>enabled</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:24.723" level="INFO">${expected_output} = enabled</msg>
<status status="PASS" starttime="20231004 13:43:24.723" endtime="20231004 13:43:24.723"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${status}</arg>
<arg>${expected_output}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.724" endtime="20231004 13:43:24.724"/>
</kw>
<doc>Insatlling NSO doesn't automatically enable the service to persistantly start on reboot
one the system has been deployed we need to ensure that the service will auto restart if the servers is
rebooted. The test will verify using the 'systemct is-enabled ncs' command if the repsonse includes the string
'enabled' the test passes, if the match is not fouund the test will fail.

If the test fails enable the service using the command 'systemctl enable ncs' and re-run the test</doc>
<status status="PASS" starttime="20231004 13:43:24.694" endtime="20231004 13:43:24.725"/>
</test>
<test id="s1-s4-t3" name="Extract the NSO Application Config" line="54">
<kw name="Run" library="OperatingSystem">
<var>${user}</var>
<arg>whoami</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.731" level="INFO">Running command 'whoami 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.738" level="INFO">${user} = root</msg>
<status status="PASS" starttime="20231004 13:43:24.728" endtime="20231004 13:43:24.738"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${groups}</var>
<arg>groups</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.742" level="INFO">Running command 'groups 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.748" level="INFO">${groups} = root ncsadmin</msg>
<status status="PASS" starttime="20231004 13:43:24.739" endtime="20231004 13:43:24.748"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${groups}</arg>
<arg>ncsadmin</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231004 13:43:24.750" endtime="20231004 13:43:24.751"/>
</kw>
<kw name="Run" library="OperatingSystem">
<var>${ncs_conf_file}</var>
<arg>ncs_cli -C -u ncsadmin &lt;&lt;&lt; "show running-config | display xml"</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20231004 13:43:24.754" level="INFO">Running command 'ncs_cli -C -u ncsadmin &lt;&lt;&lt; "show running-config | display xml" 2&gt;&amp;1'.</msg>
<msg timestamp="20231004 13:43:24.872" level="INFO">${ncs_conf_file} = &lt;config xmlns="http://tail-f.com/ns/config/1.0"&gt;
  &lt;devices xmlns="http://tail-f.com/ns/ncs"&gt;
    &lt;global-settings&gt;
      &lt;trace-dir&gt;/var/log/ncs&lt;/trace-dir&gt;
    &lt;/global-settings&gt;
    &lt;authgroups&gt;
  ...</msg>
<status status="PASS" starttime="20231004 13:43:24.751" endtime="20231004 13:43:24.872"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${NCS_CONF}</arg>
<arg>${ncs_conf_file}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231004 13:43:24.874" level="INFO">${NCS_CONF} = &lt;config xmlns="http://tail-f.com/ns/config/1.0"&gt;
  &lt;devices xmlns="http://tail-f.com/ns/ncs"&gt;
    &lt;global-settings&gt;
      &lt;trace-dir&gt;/var/log/ncs&lt;/trace-dir&gt;
    &lt;/global-settings&gt;
    &lt;authgroups&gt;
  ...</msg>
<status status="PASS" starttime="20231004 13:43:24.873" endtime="20231004 13:43:24.874"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${xpath}</var>
<arg>devices/global-settings/</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231004 13:43:24.875" level="INFO">${xpath} = devices/global-settings/</msg>
<status status="PASS" starttime="20231004 13:43:24.875" endtime="20231004 13:43:24.875"/>
</kw>
<kw name="Search XPATH against NCS_CONF">
<var>${response}</var>
<arg>${xpath}</arg>
<doc>Searches through the NCS_CONF Suite variable for a given
xpath and returns the result(s) as a list.</doc>
<kw name="Get Elements Texts" library="XML">
<var>${response}</var>
<arg>${NCS_CONF}</arg>
<arg>${xpath}</arg>
<doc>Returns text of all elements matching ``xpath`` as a list.</doc>
<msg timestamp="20231004 13:43:24.880" level="INFO">${response} = ['/var/log/ncs']</msg>
<status status="PASS" starttime="20231004 13:43:24.877" endtime="20231004 13:43:24.880"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" starttime="20231004 13:43:24.880" endtime="20231004 13:43:24.880"/>
</return>
<msg timestamp="20231004 13:43:24.880" level="INFO">${response} = ['/var/log/ncs']</msg>
<status status="PASS" starttime="20231004 13:43:24.876" endtime="20231004 13:43:24.880"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231004 13:43:24.881" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231004 13:43:24.881" endtime="20231004 13:43:24.881"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Successfully Imported NCS_CONF</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.882" level="INFO">Successfully Imported NCS_CONF</msg>
<status status="PASS" starttime="20231004 13:43:24.882" endtime="20231004 13:43:24.882"/>
</kw>
<doc>The NSO application config will be extarcted to a local file
and the subsequent test will be executed against this file.
If the test is unable to retrieve the configuration run the command
"show running-config | display xml | save ncs_config.xml" and move the file
the test folder, the script will attempt to load a file if the extarction fails
as a fallback, make sure the file is recent

The test will also validate that the test user has the neccesary group
permissions needed to execute the test, if it fails add the ncsadmin group
to the user 'usermod -a -G ncsadmin test_user'</doc>
<status status="PASS" starttime="20231004 13:43:24.726" endtime="20231004 13:43:24.883"/>
</test>
<test id="s1-s4-t4" name="Verify High-Availability is operational" line="79">
<kw name="Step. Run the command 'show ncs-state ha'" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.888" level="INFO">Run the command 'show ncs-state ha'</msg>
<status status="PASS" starttime="20231004 13:43:24.887" endtime="20231004 13:43:24.888"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.887" endtime="20231004 13:43:24.888"/>
</kw>
<kw name="Step. Verify that the high-avaialbaility status is enabled" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.889" level="INFO">Verify that the high-avaialbaility status is enabled</msg>
<status status="PASS" starttime="20231004 13:43:24.889" endtime="20231004 13:43:24.889"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.888" endtime="20231004 13:43:24.889"/>
</kw>
<kw name="Step. Verify that the output shows that the high-availability nodes are listed (master and Slave)" library="keywords" sourcename="Step. ${message}">
<doc>Simple Keyword to store text which will be added to
test case Docx as instruction/guidance steps to inform reader in the
tets procesdures</doc>
<kw name="Log" library="BuiltIn">
<arg>${message}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231004 13:43:24.890" level="INFO">Verify that the output shows that the high-availability nodes are listed (master and Slave)</msg>
<status status="PASS" starttime="20231004 13:43:24.890" endtime="20231004 13:43:24.890"/>
</kw>
<status status="PASS" starttime="20231004 13:43:24.890" endtime="20231004 13:43:24.891"/>
</kw>
<kw name="Skip" library="BuiltIn">
<arg>TODO Create Test</arg>
<doc>Skips the rest of the current test.</doc>
<msg timestamp="20231004 13:43:24.891" level="SKIP">TODO Create Test</msg>
<status status="SKIP" starttime="20231004 13:43:24.891" endtime="20231004 13:43:24.891"/>
</kw>
<doc>Verify that High-Availability is operational by running the
command 'show ncs-state ha' and 'show high-availbility' if the state
returns errors the high-availbility is not configured correctly and
needs to be modified and re-verified.</doc>
<tag>nso</tag>
<status status="SKIP" starttime="20231004 13:43:24.885" endtime="20231004 13:43:24.892">TODO Create Test</status>
</test>
<test id="s1-s4-t5" name="Verify that the T-SDN Packages are installed in NSO" line="90">
<kw name="Skip" library="BuiltIn">
<arg>TODO Create Test</arg>
<doc>Skips the rest of the current test.</doc>
<msg timestamp="20231004 13:43:24.896" level="SKIP">TODO Create Test</msg>
<status status="SKIP" starttime="20231004 13:43:24.895" endtime="20231004 13:43:24.896"/>
</kw>
<doc>The CNC integration with NSO requires that the T-SDN Core
Function Pack (CFP) is installed and present. These packages should be
uploaded to the /var/opt/ncs/packages/ folder and then linked to the
/opt/ncs/packages/ directory where the system will load them on application
startup. This test validates the core packages only, add additional test
cases for custom packages validation. If the packages are not found the
test fails. To fix, download the neccesary packages bundle and follow the
CFP install instructions.</doc>
<tag>t-sdn</tag>
<status status="SKIP" starttime="20231004 13:43:24.894" endtime="20231004 13:43:24.896">TODO Create Test</status>
</test>
<test id="s1-s4-t6" name="Verify that the T-SDN startup configurations are loaded" line="103">
<kw name="Skip" library="BuiltIn">
<arg>TODO Create Test</arg>
<doc>Skips the rest of the current test.</doc>
<msg timestamp="20231004 13:43:24.901" level="SKIP">TODO Create Test</msg>
<status status="SKIP" starttime="20231004 13:43:24.900" endtime="20231004 13:43:24.901"/>
</kw>
<doc>In addtion to the T-SDN Core Function Pack packages being
installed the system needs start-up configuration to be loaded into the
system to  operate. These files are provided as XML files in the CFP bundle in the
'config/' folder. Loading these files is achived by using the 'load merge filename.xml'
command</doc>
<tag>t-sdn</tag>
<status status="SKIP" starttime="20231004 13:43:24.898" endtime="20231004 13:43:24.901">TODO Create Test</status>
</test>
<test id="s1-s4-t7" name="Test Load merge" line="112">
<kw name="Skip" library="BuiltIn">
<arg>TODO Create Test</arg>
<doc>Skips the rest of the current test.</doc>
<msg timestamp="20231004 13:43:24.904" level="SKIP">TODO Create Test</msg>
<status status="SKIP" starttime="20231004 13:43:24.904" endtime="20231004 13:43:24.904"/>
</kw>
<doc>Some text</doc>
<status status="SKIP" starttime="20231004 13:43:24.903" endtime="20231004 13:43:24.904">TODO Create Test</status>
</test>
<status status="PASS" starttime="20231004 13:43:24.651" endtime="20231004 13:43:24.906"/>
</suite>
<status status="FAIL" starttime="20231004 13:43:22.654" endtime="20231004 13:43:24.909"/>
</suite>
<statistics>
<total>
<stat pass="21" fail="10" skip="4">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="1" skip="0">dns</stat>
<stat pass="5" fail="2" skip="1">nso</stat>
<stat pass="1" fail="1" skip="0">ntp</stat>
<stat pass="5" fail="2" skip="0">os</stat>
<stat pass="3" fail="0" skip="0">packages</stat>
<stat pass="4" fail="4" skip="0">security</stat>
<stat pass="0" fail="0" skip="2">t-sdn</stat>
</tag>
<suite>
<stat pass="21" fail="10" skip="4" id="s1" name="ATP">ATP</stat>
<stat pass="5" fail="6" skip="0" id="s1-s1" name="NSO Operating System (RHEL) Security Features Validation">ATP.NSO Operating System (RHEL) Security Features Validation</stat>
<stat pass="8" fail="2" skip="0" id="s1-s2" name="NSO Operating System (RHEL) Validations">ATP.NSO Operating System (RHEL) Validations</stat>
<stat pass="5" fail="2" skip="0" id="s1-s3" name="NSO Configuration (ncs.conf) Validations">ATP.NSO Configuration (ncs.conf) Validations</stat>
<stat pass="3" fail="0" skip="4" id="s1-s4" name="NSO Configuration (Running Config) Validation">ATP.NSO Configuration (Running Config) Validation</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
